[comment encoding = UTF-8 /]
[module IStarMAVOToSMTLIB_M2T('http://se.cs.toronto.edu/mmtf/MAVO', 'http://se.cs.toronto.edu/modelepedia/IStar_MAVO')]

[template private nodeName(node : DependencyEndpoint)]
[node.name.replaceAll(' ', '')/]
[/template]

[template private edgeName(element : IntentionalElement)]
[element.eContainer().oclAsType(Actor).name.replaceAll(' ', '')/]2[element.name.replaceAll(' ', '')/]
[/template]

[template private edgeName(end : EndReference)]
[end.src.name.replaceAll(' ', '')/]2[end.tgt.name.replaceAll(' ', '')/]
[/template]

[template private edgeName(component : ComponentsReference)]
[component.src.name.replaceAll(' ', '')/]2[component.tgt.name.replaceAll(' ', '')/]
[/template]

[template private edgeName(contribution : Contribution)]
[contribution.contributor.name.replaceAll(' ', '')/]2[contribution.contributee.name.replaceAll(' ', '')/]
[/template]

[template private edgeName(depender : DependerReference)]
[depender.tgt.name.replaceAll(' ', '')/]2[depender.src.dependum.name.replaceAll(' ', '')/]
[/template]

[template private edgeName(dependee : DependeeReference)]
[dependee.src.dependum.name.replaceAll(' ', '')/]2[dependee.tgt.name.replaceAll(' ', '')/]
[/template]

[template private encodeInitialAnalysis(ie : IntentionalElement)]
;[ie.name.replaceAll(' ', '')/] initial analysis tag
(assert (forall ((c [ie.eClass().name/]Concretization)) (=>
	(node [ie.name.replaceAll(' ', '')/] c)
[if (ie.fullySatisfied or ie.partiallySatisfied or ie.unknown or ie.conflict or ie.partiallyDenied or ie.fullyDenied)]
	(and
		(= (fs c) [if (ie.fullySatisfied)]true[else]false[/if])
		(= (ps c) [if (ie.partiallySatisfied)]true[else]false[/if])
		(= (un c) [if (ie.unknown)]true[else]false[/if])
		(= (co c) [if (ie.conflict)]true[else]false[/if])
		(= (pd c) [if (ie.partiallyDenied)]true[else]false[/if])
		(= (fd c) [if (ie.fullyDenied)]true[else]false[/if])
		(= (inited c) true)
	)
[else]
	(= (inited c) false)
[/if]
)))
[/template]

[template private encodeMetamodelConstant(sort : String, fun : String, name : String, funConst : String, const : String)]
;[name/] [funConst/] constant
(assert (forall ((c [sort/])) (=>
	([fun/] [name/] c)
	(= ([funConst/] c) [const/])
)))
[/template]

[template private encodeMetamodelConstraint(sort : String, fun : String, name : String, funSrc : String, funOverloadSrc : String, nameSrc : String, funTgt : String, funOverloadTgt : String, nameTgt : String)]
;[name/] endpoints
(assert (forall ((c [sort/])) (=>
	([fun/] [name/] c)
	(and
		([funSrc/] [nameSrc/] ([if (funOverloadSrc.oclIsUndefined())]src[else](as src ([funOverloadSrc/]))[/if] c))
		([funTgt/] [nameTgt/] ([if (funOverloadTgt.oclIsUndefined())]tgt[else](as tgt ([funOverloadTgt/]))[/if] c))
	)
)))
[/template]

[template private encodeMayConstraint(sort : String, fun : String, name : String)]
;[name/] Exists
(assert	(exists ((c [sort/])) ([fun/] [name/] c)))
[/template]

[template private encodeSetConstraint(sort : String, fun : String, name : String)]
;[name/] is Unique
(assert	(forall ((c1 [sort/]) (c2 [sort/])) (=>
	(and ([fun/] [name/] c1) ([fun/] [name/] c2))
	(= c1 c2)
)))
[/template]

[template private encodeVarConstraint(sort : String, fun : String, name1 : String, name2 : String)]
;[name1/] is Distinct from [name2/]
(assert	(forall ((c [sort/])) (=>
	([fun/] [name1/] c)
	(not ([fun/] [name2/] c))
)))
[/template]

[template private encodeMAVOConstraints(istar : IStar, node : IntentionalElement)]
[let nodeType : String = node.eClass().name]
[if (not node.may)]
[encodeMayConstraint(nodeType+'Concretization', 'node', nodeName(node))/]
[/if]
[if (not node.set)]
[encodeSetConstraint(nodeType+'Concretization', 'node', nodeName(node))/]
[/if]
[if (node.eContainer().oclIsTypeOf(IStar))]
	[for (actor2 : Actor | istar.actors)]
		[for (node2 : IntentionalElement | actor2.intentionalElements->select(eClass().name = nodeType))]
	[encodeVarConstraint(nodeType+'Concretization', 'node', nodeName(node), nodeName(node2))/]
		[/for]
	[/for]
	[if (not node.var)]
		[for (node2 : IntentionalElement | istar.dependums->select(eClass().name = nodeType))]
			[if (not (node.name = node2.name))]
	[encodeVarConstraint(nodeType+'Concretization', 'node', nodeName(node), nodeName(node2))/]
			[/if]
		[/for]
	[/if]
[else]
	[for (node2 : IntentionalElement | istar.dependums->select(eClass().name = nodeType))]
	[encodeVarConstraint(nodeType+'Concretization', 'node', nodeName(node), nodeName(node2))/]
	[/for]
	[for (actor2 : Actor | istar.actors)]
		[if (not (node.eContainer().oclAsType(Actor).name = actor2.name) and not actor2.var and not node.var)]
			[for (node2 : IntentionalElement | actor2.intentionalElements->select(eClass().name = nodeType))]
	[encodeVarConstraint(nodeType+'Concretization', 'node', nodeName(node), nodeName(node2))/]
			[/for]
		[/if]
	[/for]
	[if (not node.var)]
		[for (node2 : IntentionalElement | node.eContainer().oclAsType(Actor).intentionalElements->select(eClass().name = nodeType))]
			[if (not (node.name = node2.name))]
	[encodeVarConstraint(nodeType+'Concretization', 'node', nodeName(node), nodeName(node2))/]
			[/if]
		[/for]
	[/if]
[/if]
[/let]
[/template]

[template private encodeConstants(istar : IStar)]
;Endpoint Types
(declare-const ENDPOINT_TASK Int)
(declare-const ENDPOINT_GOAL Int)
(declare-const ENDPOINT_SOFTGOAL Int)
(declare-const ENDPOINT_RESOURCE Int)
(assert (= ENDPOINT_TASK 1))
(assert (= ENDPOINT_GOAL 2))
(assert (= ENDPOINT_SOFTGOAL 3))
(assert (= ENDPOINT_RESOURCE 4))

;Contribution Types
(declare-const CONTRIBUTION_MAKE Int)
(declare-const CONTRIBUTION_HELP Int)
(declare-const CONTRIBUTION_SOMEPLUS Int)
(declare-const CONTRIBUTION_BREAK Int)
(declare-const CONTRIBUTION_HURT Int)
(declare-const CONTRIBUTION_SOMEMINUS Int)
(declare-const CONTRIBUTION_UNKNOWN Int)
(assert (= CONTRIBUTION_MAKE 11))
(assert (= CONTRIBUTION_HELP 12))
(assert (= CONTRIBUTION_SOMEPLUS 13))
(assert (= CONTRIBUTION_BREAK 14))
(assert (= CONTRIBUTION_HURT 15))
(assert (= CONTRIBUTION_SOMEMINUS 16))
(assert (= CONTRIBUTION_UNKNOWN 17))
[/template]

[template private encodeModel(istar : IStar)]

;Model
(declare-datatypes () ((Actor
[for (actor : Actor | istar.actors)]
	[nodeName(actor)/]
[/for]
)))
(declare-datatypes () ((Task
[for (task : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Task)))]
	[nodeName(task)/]
[/for]
)))
(declare-datatypes () ((Goal
[for (goal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Goal)))]
	[nodeName(goal)/]
[/for]
)))
(declare-datatypes () ((SoftGoal
[for (softgoal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(SoftGoal)))]
	[nodeName(softgoal)/]
[/for]
)))
(declare-datatypes () ((Resource
[for (resource : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Resource)))]
	[nodeName(resource)/]
[/for]
)))
(declare-datatypes () ((IntentionalElement
[for (actor : Actor | istar.actors)]
	[for (element : IntentionalElement | actor.intentionalElements)]
	[edgeName(element)/]
	[/for]
[/for]
)))
(declare-datatypes () ((MeansEnd
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (end : EndReference | task.oclAsType(Task).end)]
	[edgeName(end)/]
		[/for]
	[/for]
[/for]
)))
(declare-datatypes () ((Decomposition
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (component : ComponentsReference | task.oclAsType(Task).components)]
	[edgeName(component)/]
		[/for]
	[/for]
[/for]
)))
(declare-datatypes () ((Contribution
[for (actor : Actor | istar.actors)]
	[for (softgoal : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(SoftGoal)))]
		[for (contribution : Contribution | softgoal.oclAsType(SoftGoal).contributionsAsContributee)]
	[edgeName(contribution)/]
		[/for]
	[/for]
[/for]
)))
(declare-datatypes () ((Depender
[for (dependency : Dependency | istar.dependencies)]
	[for (depender : DependerReference | dependency.depender->select(not tgt.oclIsTypeOf(Actor)))]
	[edgeName(depender)/]
	[/for]
[/for]
)))
(declare-datatypes () ((Dependee
[for (dependency : Dependency | istar.dependencies)]
	[for (dependee : DependeeReference | dependency.dependee->select(not tgt.oclIsTypeOf(Actor)))]
	[edgeName(dependee)/]
	[/for]
[/for]
)))

;Concretizations
(declare-sort ActorConcretization)
(declare-sort TaskConcretization)
(declare-sort GoalConcretization)
(declare-sort SoftGoalConcretization)
(declare-sort ResourceConcretization)
(declare-sort IntentionalElementConcretization)
(declare-sort MeansEndConcretization)
(declare-sort DecompositionConcretization)
(declare-sort ContributionConcretization)
(declare-sort DependerConcretization)
(declare-sort DependeeConcretization)
(declare-fun node (Actor ActorConcretization) Bool)
(declare-fun node (Task TaskConcretization) Bool)
(declare-fun node (Goal GoalConcretization) Bool)
(declare-fun node (SoftGoal SoftGoalConcretization) Bool)
(declare-fun node (Resource ResourceConcretization) Bool)
(declare-fun edge (IntentionalElement IntentionalElementConcretization) Bool)
(declare-fun tgtEndpoint (IntentionalElementConcretization) Int)
(declare-fun src (IntentionalElementConcretization) ActorConcretization)
(declare-fun tgt (IntentionalElementConcretization) TaskConcretization)
(declare-fun tgt (IntentionalElementConcretization) GoalConcretization)
(declare-fun tgt (IntentionalElementConcretization) SoftGoalConcretization)
(declare-fun tgt (IntentionalElementConcretization) ResourceConcretization)
(declare-fun edge (MeansEnd MeansEndConcretization) Bool)
(declare-fun src (MeansEndConcretization) TaskConcretization)
(declare-fun tgt (MeansEndConcretization) GoalConcretization)
(declare-fun edge (Decomposition DecompositionConcretization) Bool)
(declare-fun tgtEndpoint (DecompositionConcretization) Int)
(declare-fun src (DecompositionConcretization) TaskConcretization)
(declare-fun tgt (DecompositionConcretization) TaskConcretization)
(declare-fun tgt (DecompositionConcretization) GoalConcretization)
(declare-fun tgt (DecompositionConcretization) SoftGoalConcretization)
(declare-fun tgt (DecompositionConcretization) ResourceConcretization)
(declare-fun edge (Contribution ContributionConcretization) Bool)
(declare-fun srcEndpoint (ContributionConcretization) Int)
(declare-fun type (ContributionConcretization) Int)
(declare-fun src (ContributionConcretization) TaskConcretization)
(declare-fun src (ContributionConcretization) GoalConcretization)
(declare-fun src (ContributionConcretization) SoftGoalConcretization)
(declare-fun src (ContributionConcretization) ResourceConcretization)
(declare-fun tgt (ContributionConcretization) SoftGoalConcretization)
(declare-fun edge (Depender DependerConcretization) Bool)
(declare-fun srcEndpoint (DependerConcretization) Int)
(declare-fun tgtEndpoint (DependerConcretization) Int)
(declare-fun src (DependerConcretization) TaskConcretization)
(declare-fun src (DependerConcretization) GoalConcretization)
(declare-fun src (DependerConcretization) SoftGoalConcretization)
(declare-fun src (DependerConcretization) ResourceConcretization)
(declare-fun tgt (DependerConcretization) TaskConcretization)
(declare-fun tgt (DependerConcretization) GoalConcretization)
(declare-fun tgt (DependerConcretization) SoftGoalConcretization)
(declare-fun tgt (DependerConcretization) ResourceConcretization)
(declare-fun edge (Dependee DependeeConcretization) Bool)
(declare-fun srcEndpoint (DependeeConcretization) Int)
(declare-fun tgtEndpoint (DependeeConcretization) Int)
(declare-fun src (DependeeConcretization) TaskConcretization)
(declare-fun src (DependeeConcretization) GoalConcretization)
(declare-fun src (DependeeConcretization) SoftGoalConcretization)
(declare-fun src (DependeeConcretization) ResourceConcretization)
(declare-fun tgt (DependeeConcretization) TaskConcretization)
(declare-fun tgt (DependeeConcretization) GoalConcretization)
(declare-fun tgt (DependeeConcretization) SoftGoalConcretization)
(declare-fun tgt (DependeeConcretization) ResourceConcretization)
[/template]

[template private encodeAnalysis(istar : IStar)]

;Analysis
(declare-fun inited (TaskConcretization) Bool)
(declare-fun inited (GoalConcretization) Bool)
(declare-fun inited (SoftGoalConcretization) Bool)
(declare-fun inited (ResourceConcretization) Bool)
(declare-fun fsSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun fsTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun fsSrcEndpoint (ContributionConcretization) Bool)
(declare-fun fsTgtEndpoint (DependerConcretization) Bool)
(declare-fun fsTgtEndpoint (DependeeConcretization) Bool)
(declare-fun psSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun psTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun psSrcEndpoint (ContributionConcretization) Bool)
(declare-fun psTgtEndpoint (DependerConcretization) Bool)
(declare-fun psTgtEndpoint (DependeeConcretization) Bool)
(declare-fun unSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun unTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun unSrcEndpoint (ContributionConcretization) Bool)
(declare-fun unTgtEndpoint (DependerConcretization) Bool)
(declare-fun unTgtEndpoint (DependeeConcretization) Bool)
(declare-fun coSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun coTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun coSrcEndpoint (ContributionConcretization) Bool)
(declare-fun coTgtEndpoint (DependerConcretization) Bool)
(declare-fun coTgtEndpoint (DependeeConcretization) Bool)
(declare-fun pdSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun pdTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun pdSrcEndpoint (ContributionConcretization) Bool)
(declare-fun pdTgtEndpoint (DependerConcretization) Bool)
(declare-fun pdTgtEndpoint (DependeeConcretization) Bool)
(declare-fun fdSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun fdTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun fdSrcEndpoint (ContributionConcretization) Bool)
(declare-fun fdTgtEndpoint (DependerConcretization) Bool)
(declare-fun fdTgtEndpoint (DependeeConcretization) Bool)
(declare-fun fs (TaskConcretization) Bool)
(declare-fun fs (GoalConcretization) Bool)
(declare-fun fs (SoftGoalConcretization) Bool)
(declare-fun fs (ResourceConcretization) Bool)
(declare-fun fs (MeansEndConcretization) Bool)
(declare-fun fs (DecompositionConcretization) Bool)
(declare-fun fs (ContributionConcretization) Bool)
(declare-fun fs (DependerConcretization) Bool)
(declare-fun fs (DependeeConcretization) Bool)
(declare-fun ps (TaskConcretization) Bool)
(declare-fun ps (GoalConcretization) Bool)
(declare-fun ps (SoftGoalConcretization) Bool)
(declare-fun ps (ResourceConcretization) Bool)
(declare-fun ps (MeansEndConcretization) Bool)
(declare-fun ps (DecompositionConcretization) Bool)
(declare-fun ps (ContributionConcretization) Bool)
(declare-fun ps (DependerConcretization) Bool)
(declare-fun ps (DependeeConcretization) Bool)
(declare-fun un (TaskConcretization) Bool)
(declare-fun un (GoalConcretization) Bool)
(declare-fun un (SoftGoalConcretization) Bool)
(declare-fun un (ResourceConcretization) Bool)
(declare-fun un (MeansEndConcretization) Bool)
(declare-fun un (DecompositionConcretization) Bool)
(declare-fun un (ContributionConcretization) Bool)
(declare-fun un (DependerConcretization) Bool)
(declare-fun un (DependeeConcretization) Bool)
(declare-fun co (TaskConcretization) Bool)
(declare-fun co (GoalConcretization) Bool)
(declare-fun co (SoftGoalConcretization) Bool)
(declare-fun co (ResourceConcretization) Bool)
(declare-fun co (MeansEndConcretization) Bool)
(declare-fun co (DecompositionConcretization) Bool)
(declare-fun co (ContributionConcretization) Bool)
(declare-fun co (DependerConcretization) Bool)
(declare-fun co (DependeeConcretization) Bool)
(declare-fun pd (TaskConcretization) Bool)
(declare-fun pd (GoalConcretization) Bool)
(declare-fun pd (SoftGoalConcretization) Bool)
(declare-fun pd (ResourceConcretization) Bool)
(declare-fun pd (MeansEndConcretization) Bool)
(declare-fun pd (DecompositionConcretization) Bool)
(declare-fun pd (ContributionConcretization) Bool)
(declare-fun pd (DependerConcretization) Bool)
(declare-fun pd (DependeeConcretization) Bool)
(declare-fun fd (TaskConcretization) Bool)
(declare-fun fd (GoalConcretization) Bool)
(declare-fun fd (SoftGoalConcretization) Bool)
(declare-fun fd (ResourceConcretization) Bool)
(declare-fun fd (MeansEndConcretization) Bool)
(declare-fun fd (DecompositionConcretization) Bool)
(declare-fun fd (ContributionConcretization) Bool)
(declare-fun fd (DependerConcretization) Bool)
(declare-fun fd (DependeeConcretization) Bool)
(assert (forall ((c MeansEndConcretization)) (= (fsSrcEndpoint c) (fs (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (psSrcEndpoint c) (ps (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (unSrcEndpoint c) (un (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (coSrcEndpoint c) (co (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (pdSrcEndpoint c) (pd (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (fdSrcEndpoint c) (fd (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (fs c) (fsSrcEndpoint c))))
(assert (forall ((c MeansEndConcretization)) (= (ps c) (psSrcEndpoint c))))
(assert (forall ((c MeansEndConcretization)) (= (un c) (unSrcEndpoint c))))
(assert (forall ((c MeansEndConcretization)) (= (co c) (coSrcEndpoint c))))
(assert (forall ((c MeansEndConcretization)) (= (pd c) (pdSrcEndpoint c))))
(assert (forall ((c MeansEndConcretization)) (= (fd c) (fdSrcEndpoint c))))
(assert (forall ((c DecompositionConcretization)) (= (fsTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fs ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fs ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as tgt (SoftGoalConcretization)) c))
				(fs ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (psTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(ps ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(ps ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as tgt (SoftGoalConcretization)) c))
				(ps ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (unTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(un ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(un ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as tgt (SoftGoalConcretization)) c))
				(un ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (coTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(co ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(co ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as tgt (SoftGoalConcretization)) c))
				(co ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (pdTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(pd ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(pd ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(pd ((as tgt (SoftGoalConcretization)) dc))
				(pd ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (fdTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as tgt (SoftGoalConcretization)) c))
				(fd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (fs c) (fsTgtEndpoint c))))
(assert (forall ((c DecompositionConcretization)) (= (ps c) (psTgtEndpoint c))))
(assert (forall ((c DecompositionConcretization)) (= (un c) (unTgtEndpoint c))))
(assert (forall ((c DecompositionConcretization)) (= (co c) (coTgtEndpoint c))))
(assert (forall ((c DecompositionConcretization)) (= (pd c) (pdTgtEndpoint c))))
(assert (forall ((c DecompositionConcretization)) (= (fd c) (fdTgtEndpoint c))))
(assert (forall ((c ContributionConcretization)) (= (fsSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(fs ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(fs ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as src (SoftGoalConcretization)) c))
				(fs ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (psSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(ps ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(ps ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as src (SoftGoalConcretization)) c))
				(ps ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (unSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(un ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(un ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as src (SoftGoalConcretization)) c))
				(un ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (coSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(co ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(co ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as src (SoftGoalConcretization)) c))
				(co ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (pdSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(pd ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(pd ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(pd ((as src (SoftGoalConcretization)) c))
				(pd ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fdSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(fd ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(fd ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as src (SoftGoalConcretization)) c))
				(fd ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fs c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (fsSrcEndpoint c)
			true
			false
		)
		false
	)
)))
(assert (forall ((c ContributionConcretization)) (= (ps c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (psSrcEndpoint c)
			true
			false
		)
		(ite (or (= (type c) CONTRIBUTION_HELP) (= (type c) CONTRIBUTION_SOMEPLUS))
			(ite (or (fsSrcEndpoint c) (psSrcEndpoint c))
				true
				false
			)
			(ite (or (= (type c) CONTRIBUTION_BREAK) (= (type c) CONTRIBUTION_HURT) (= (type c) CONTRIBUTION_SOMEMINUS))
				(ite (or (pdSrcEndpoint c) (fdSrcEndpoint c))
					true
					false
				)
				false
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (un c)
	(ite (= (type c) CONTRIBUTION_UNKNOWN)
		true
		(ite (unSrcEndpoint c)
			true
			false
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (co c)
	(ite (= (type c) CONTRIBUTION_UNKNOWN)
		false
		(ite (coSrcEndpoint c)
			true
			false
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (pd c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (pdSrcEndpoint c)
			true
			false
		)
		(ite (or (= (type c) CONTRIBUTION_HELP) (= (type c) CONTRIBUTION_SOMEPLUS))
			(ite (or (pdSrcEndpoint c) (fdSrcEndpoint c))
				true
				false
			)
			(ite (= (type c) CONTRIBUTION_BREAK)
				(ite (psSrcEndpoint c)
					true
					false
				)
				(ite (or (= (type c) CONTRIBUTION_HURT) (= (type c) CONTRIBUTION_SOMEMINUS))
					(ite (or (fsSrcEndpoint c) (psSrcEndpoint c))
						true
						false
					)
					false
				)
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fd c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (fdSrcEndpoint c)
			true
			false
		)
		(ite (= (type c) CONTRIBUTION_BREAK)
			(ite (fsSrcEndpoint c)
				true
				false
			)
			false
		)
	)
)))
(assert (forall ((c DependerConcretization)) (= (fsTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fs ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fs ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as tgt (SoftGoalConcretization)) c))
				(fs ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerConcretization)) (= (psTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(ps ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(ps ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as tgt (SoftGoalConcretization)) c))
				(ps ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerConcretization)) (= (unTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(un ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(un ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as tgt (SoftGoalConcretization)) c))
				(un ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerConcretization)) (= (coTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(co ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(co ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as tgt (SoftGoalConcretization)) c))
				(co ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((dc DependerConcretization)) (= (pdTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(pd ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(pd ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(pd ((as tgt (SoftGoalConcretization)) dc))
				(pd ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((c DependerConcretization)) (= (fdTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as tgt (SoftGoalConcretization)) c))
				(fd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerConcretization)) (= (fs c) (fsTgtEndpoint c))))
(assert (forall ((c DependerConcretization)) (= (ps c) (psTgtEndpoint c))))
(assert (forall ((c DependerConcretization)) (= (un c) (unTgtEndpoint c))))
(assert (forall ((c DependerConcretization)) (= (co c) (coTgtEndpoint c))))
(assert (forall ((c DependerConcretization)) (= (pd c) (pdTgtEndpoint c))))
(assert (forall ((c DependerConcretization)) (= (fd c) (fdTgtEndpoint c))))
(assert (forall ((c DependeeConcretization)) (= (fsTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fs ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fs ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as tgt (SoftGoalConcretization)) c))
				(fs ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeConcretization)) (= (psTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(ps ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(ps ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as tgt (SoftGoalConcretization)) c))
				(ps ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeConcretization)) (= (unTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(un ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(un ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as tgt (SoftGoalConcretization)) c))
				(un ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeConcretization)) (= (coTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(co ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(co ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as tgt (SoftGoalConcretization)) c))
				(co ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((dc DependeeConcretization)) (= (pdTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(pd ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(pd ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(pd ((as tgt (SoftGoalConcretization)) dc))
				(pd ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((c DependeeConcretization)) (= (fdTgtEndpoint c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as tgt (SoftGoalConcretization)) c))
				(fd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeConcretization)) (= (fs c) (fsTgtEndpoint c))))
(assert (forall ((c DependeeConcretization)) (= (ps c) (psTgtEndpoint c))))
(assert (forall ((c DependeeConcretization)) (= (un c) (unTgtEndpoint c))))
(assert (forall ((c DependeeConcretization)) (= (co c) (coTgtEndpoint c))))
(assert (forall ((c DependeeConcretization)) (= (pd c) (pdTgtEndpoint c))))
(assert (forall ((c DependeeConcretization)) (= (fd c) (fdTgtEndpoint c))))

;One analysis tag constraint
(assert (forall ((c TaskConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c))))
(assert (forall ((c GoalConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c))))
(assert (forall ((c SoftGoalConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c))))
(assert (forall ((c ResourceConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c))))
[/template]

[template private encodeConstraints(istar : IStar)]

;Complete Model
(assert	(forall ((c ActorConcretization)) (or
[for (actor : Actor | istar.actors)]
	(node [nodeName(actor)/] c)
[/for]
)))
(assert	(forall ((c TaskConcretization)) (or
[for (task : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Task)))]
	(node [nodeName(task)/] c)
[/for]
)))
(assert (forall ((c GoalConcretization)) (or
[for (goal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Goal)))]
	(node [nodeName(goal)/] c)
[/for]
)))
(assert (forall ((c SoftGoalConcretization)) (or
[for (softgoal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(SoftGoal)))]
	(node [nodeName(softgoal)/] c)
[/for]
)))
(assert (forall ((c ResourceConcretization)) (or
[for (resource : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Resource)))]
	(node [nodeName(resource)/] c)
[/for]
)))
(assert (forall ((c IntentionalElementConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (element : IntentionalElement | actor.intentionalElements)]
	(edge [edgeName(element)/] c)
	[/for]
[/for]
)))
(assert (forall ((c MeansEndConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (end : EndReference | task.oclAsType(Task).end)]
	(edge [edgeName(end)/] c)
		[/for]
	[/for]
[/for]
)))
(assert (forall ((c DecompositionConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (component : ComponentsReference | task.oclAsType(Task).components)]
	(edge [edgeName(component)/] c)
		[/for]
	[/for]
[/for]
)))
(assert (forall ((c ContributionConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (softgoal : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(SoftGoal)))]
		[for (contribution : Contribution | softgoal.oclAsType(SoftGoal).contributionsAsContributee)]
	(edge [edgeName(contribution)/] c)
		[/for]
	[/for]
[/for]
)))
(assert (forall ((c DependerConcretization)) (or
[for (dependency : Dependency | istar.dependencies)]
	[for (depender : DependerReference | dependency.depender->select(not tgt.oclIsTypeOf(Actor)))]
	(edge [edgeName(depender)/] c)
	[/for]
[/for]
)))
(assert (forall ((c DependeeConcretization)) (or
[for (dependency : Dependency | istar.dependencies)]
	[for (dependee : DependeeReference | dependency.dependee->select(not tgt.oclIsTypeOf(Actor)))]
	(edge [edgeName(dependee)/] c)
	[/for]
[/for]
)))

;Model Elements
[for (actor : Actor | istar.actors)]
	[if (not actor.may)]
[encodeMayConstraint('ActorConcretization', 'node', nodeName(actor))/]
	[/if]
	[if (not actor.set)]
[encodeSetConstraint('ActorConcretization', 'node', nodeName(actor))/]
	[/if]
	[if (not actor.var)]
		[for (actor2 : Actor | istar.actors)]
			[if (not (actor.name = actor2.name))]
[encodeVarConstraint('ActorConcretization', 'node', nodeName(actor), nodeName(actor2))/]
			[/if]
		[/for]
	[/if]
[/for]
[for (task : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Task)))]
[encodeInitialAnalysis(task)/]
[encodeMAVOConstraints(istar, task)/]
[/for]
[for (goal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Goal)))]
[encodeInitialAnalysis(goal)/]
[encodeMAVOConstraints(istar, goal)/]
[/for]
[for (softgoal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(SoftGoal)))]
[encodeInitialAnalysis(softgoal)/]
[encodeMAVOConstraints(istar, softgoal)/]
[/for]
[for (resource : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Resource)))]
[encodeInitialAnalysis(resource)/]
[encodeMAVOConstraints(istar, resource)/]
[/for]
[for (actor : Actor | istar.actors)]
	[for (element : IntentionalElement | actor.intentionalElements)]
		[let tgtType : String = element.eClass().name]
[encodeMetamodelConstant('IntentionalElementConcretization', 'edge', edgeName(element), 'tgtEndpoint', 'ENDPOINT_'+tgtType.toUpper())/]
[encodeMetamodelConstraint('IntentionalElementConcretization', 'edge', edgeName(element), 'node', null, nodeName(element.eContainer().oclAsType(Actor)), 'node', tgtType+'Concretization', nodeName(element))/]
		[if (not element.may)]
[encodeMayConstraint('IntentionalElementConcretization', 'edge', edgeName(element))/]
		[/if]
		[if (not element.set)]
[encodeSetConstraint('IntentionalElementConcretization', 'edge', edgeName(element))/]
		[/if]
		[for (actor2 : Actor | istar.actors)]
			[if (not (actor.name = actor2.name) and not actor2.var and not element.var)]
				[for (element2 : IntentionalElement | actor2.intentionalElements->select(eClass().name = tgtType))]
[encodeVarConstraint('IntentionalElementConcretization', 'edge', edgeName(element), edgeName(element2))/]
				[/for]
			[/if]
		[/for]
		[if (not element.var)]
			[for (element2 : IntentionalElement | actor.intentionalElements->select(eClass().name = tgtType))]
				[if (not (edgeName(element) = edgeName(element2)))]
[encodeVarConstraint('IntentionalElementConcretization', 'edge', edgeName(element), edgeName(element2))/]
				[/if]
			[/for]
		[/if]
		[/let]
	[/for]
[/for]
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (end : EndReference | task.oclAsType(Task).end)]
[encodeMetamodelConstraint('MeansEndConcretization', 'edge', edgeName(end), 'node', null, nodeName(end.src), 'node', null, nodeName(end.tgt))/]
			[if (not end.may)]
[encodeMayConstraint('MeansEndConcretization', 'edge', edgeName(end))/]
			[/if]
			[if (not end.set)]
[encodeSetConstraint('MeansEndConcretization', 'edge', edgeName(end))/]
			[/if]
			[for (actor2 : Actor | istar.actors)]
				[if (not (actor.name = actor2.name) and not actor2.var and not end.var)]
					[for (task2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Task)))]
						[for (end2 : EndReference | task2.oclAsType(Task).end)]
[encodeVarConstraint('MeansEndConcretization', 'edge', edgeName(end), edgeName(end2))/]
						[/for]
					[/for]
				[/if]
			[/for]
			[if (not end.var)]
				[for (task2 : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
					[for (end2 : EndReference | task2.oclAsType(Task).end)]
						[if (not (edgeName(end) = edgeName(end2)))]
[encodeVarConstraint('MeansEndConcretization', 'edge', edgeName(end), edgeName(end2))/]
						[/if]
					[/for]
				[/for]
			[/if]
		[/for]
	[/for]
[/for]
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (component : ComponentsReference | task.oclAsType(Task).components)]
			[let tgtType : String = component.tgt.eClass().name]
[encodeMetamodelConstant('DecompositionConcretization', 'edge', edgeName(component), 'tgtEndpoint', 'ENDPOINT_'+tgtType.toUpper())/]
[encodeMetamodelConstraint('DecompositionConcretization', 'edge', edgeName(component), 'node', null, nodeName(component.src), 'node', tgtType+'Concretization', nodeName(component.tgt))/]
			[if (not component.may)]
[encodeMayConstraint('DecompositionConcretization', 'edge', edgeName(component))/]
			[/if]
			[if (not component.set)]
[encodeSetConstraint('DecompositionConcretization', 'edge', edgeName(component))/]
			[/if]
			[for (actor2 : Actor | istar.actors)]
				[if (not (actor.name = actor2.name) and not actor2.var and not component.var)]
					[for (task2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Task)))]
						[for (component2 : ComponentsReference | task2.oclAsType(Task).components->select(tgt.eClass().name = tgtType))]
[encodeVarConstraint('DecompositionConcretization', 'edge', edgeName(component), edgeName(component2))/]
						[/for]
					[/for]
				[/if]
			[/for]
			[if (not component.var)]
				[for (task2 : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
					[for (component2 : ComponentsReference | task2.oclAsType(Task).components->select(tgt.eClass().name = tgtType))]
						[if (not (edgeName(component) = edgeName(component2)))]
[encodeVarConstraint('DecompositionConcretization', 'edge', edgeName(component), edgeName(component2))/]
						[/if]
					[/for]
				[/for]
			[/if]
			[/let]
		[/for]
	[/for]
[/for]
[for (actor : Actor | istar.actors)]
	[for (contribution : Contribution | actor.contributions)]
		[let srcType : String = contribution.contributor.eClass().name]
[encodeMetamodelConstant('ContributionConcretization', 'edge', edgeName(contribution), 'type', 'CONTRIBUTION_'+contribution.type.toUpper())/]
[encodeMetamodelConstant('ContributionConcretization', 'edge', edgeName(contribution), 'srcEndpoint', 'ENDPOINT_'+srcType.toUpper())/]
[encodeMetamodelConstraint('ContributionConcretization', 'edge', edgeName(contribution), 'node', srcType+'Concretization', nodeName(contribution.contributor), 'node', null, nodeName(contribution.contributee))/]
		[if (not contribution.may)]
[encodeMayConstraint('ContributionConcretization', 'edge', edgeName(contribution))/]
		[/if]
		[if (not contribution.set)]
[encodeSetConstraint('ContributionConcretization', 'edge', edgeName(contribution))/]
		[/if]
		[for (actor2 : Actor | istar.actors)]
			[if (not (actor.name = actor2.name) and not actor2.var and not contribution.var)]
				[for (contribution2 : Contribution | actor2.contributions->select(contributor.eClass().name = srcType))]
[encodeVarConstraint('ContributionConcretization', 'edge', edgeName(contribution), edgeName(contribution2))/]
				[/for]
			[/if]
		[/for]
		[if (not contribution.var)]
			[for (contribution2 : Contribution | actor.contributions->select(contributor.eClass().name = srcType))]
				[if (not (edgeName(contribution) = edgeName(contribution2)))]
[encodeVarConstraint('ContributionConcretization', 'edge', edgeName(contribution), edgeName(contribution2))/]
				[/if]
			[/for]
		[/if]
		[/let]
	[/for]
[/for]
[for (dependency : Dependency | istar.dependencies)]
	[for (depender : DependerReference | dependency.depender->select(not tgt.oclIsTypeOf(Actor)))]
		[let srcType : String = depender.tgt.eClass().name]
		[let tgtType : String = depender.src.dependum.eClass().name]
[encodeMetamodelConstant('DependerConcretization', 'edge', edgeName(depender), 'srcEndpoint', 'ENDPOINT_'+srcType.toUpper())/]
[encodeMetamodelConstant('DependerConcretization', 'edge', edgeName(depender), 'tgtEndpoint', 'ENDPOINT_'+tgtType.toUpper())/]
[encodeMetamodelConstraint('DependerConcretization', 'edge', edgeName(depender), 'node', srcType+'Concretization', nodeName(depender.tgt), 'node', tgtType+'Concretization', nodeName(depender.src.dependum))/]
		[if (not depender.may)]
[encodeMayConstraint('DependerConcretization', 'edge', edgeName(depender))/]
		[/if]
		[if (not depender.set)]
[encodeSetConstraint('DependerConcretization', 'edge', edgeName(depender))/]
		[/if]
		[if (not depender.var)]
			[for (dependency2 : Dependency | istar.dependencies)]
				[for (depender2 : DependerReference | dependency2.depender->select(not tgt.oclIsTypeOf(Actor) and tgt.eClass().name = srcType and src.dependum.eClass().name = tgtType))]
					[if (not (edgeName(depender) = edgeName(depender2)))]
[encodeVarConstraint('DependerConcretization', 'edge', edgeName(depender), edgeName(depender2))/]
					[/if]
				[/for]
			[/for]
		[/if]
		[/let]
		[/let]
	[/for]
[/for]
[for (dependency : Dependency | istar.dependencies)]
	[for (dependee : DependeeReference | dependency.dependee->select(not tgt.oclIsTypeOf(Actor)))]
		[let srcType : String = dependee.src.dependum.eClass().name]
		[let tgtType : String = dependee.tgt.eClass().name]
[encodeMetamodelConstant('DependeeConcretization', 'edge', edgeName(dependee), 'srcEndpoint', 'ENDPOINT_'+srcType.toUpper())/]
[encodeMetamodelConstant('DependeeConcretization', 'edge', edgeName(dependee), 'tgtEndpoint', 'ENDPOINT_'+tgtType.toUpper())/]
[encodeMetamodelConstraint('DependeeConcretization', 'edge', edgeName(dependee), 'node', srcType+'Concretization', nodeName(dependee.src.dependum), 'node', tgtType+'Concretization', nodeName(dependee.tgt))/]
		[if (not dependee.may)]
[encodeMayConstraint('DependeeConcretization', 'edge', edgeName(dependee))/]
		[/if]
		[if (not dependee.set)]
[encodeSetConstraint('DependeeConcretization', 'edge', edgeName(dependee))/]
		[/if]
		[if (not dependee.var)]
			[for (dependency2 : Dependency | istar.dependencies)]
				[for (dependee2 : DependeeReference | dependency2.dependee->select(not tgt.oclIsTypeOf(Actor) and src.dependum.eClass().name = srcType and tgt.eClass().name = tgtType))]
					[if (not (edgeName(dependee) = edgeName(dependee2)))]
[encodeVarConstraint('DependeeConcretization', 'edge', edgeName(dependee), edgeName(dependee2))/]
					[/if]
				[/for]
			[/for]
		[/if]
		[/let]
		[/let]
	[/for]
[/for]
[/template]

[template private encodePropagation(istar : IStar)]

;Goal propagation (MeansEnd + Dependee)
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (fs gc) (ite
	(or
		(exists ((mec MeansEndConcretization)) (and (= (tgt mec) gc) (fs mec)))
		(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) gc) (fs dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) gc) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (ps dc2))))))
	)
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (ps gc) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (ps mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (fs mec2)))))
		(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) gc) (ps dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) gc) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))))
	)
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (un gc) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (un mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2))))))
		(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) gc) (un dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) gc) (or (fd dc2) (pd dc2) (co dc2))))))
	)
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (co gc) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (co mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2) (un mec2))))))
		(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) gc) (co dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) gc) (or (fd dc2) (pd dc2))))))
	)
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (pd gc) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (pd mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2) (un mec2) (co mec2))))))
		(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) gc) (pd dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) gc) (fd dc2)))))
	)
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (fd gc) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (fd mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2) (un mec2) (co mec2) (pd mec2))))))
		(exists ((dc DependeeConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) gc) (fd dc)))
	)
	true
	false
)))))

;Task propagation (Decomposition + Depender)
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc)) (= (fd tc) (ite
	(or
		(exists ((dc DecompositionConcretization)) (and (= (src dc) tc) (fd dc)))
		(exists ((dc DependerConcretization)) (and (= (srcEndpoint dc) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc) tc) (fd dc)))
	)
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (pd tc) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (pd dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (fd dc2)))) (not (exists ((dc3 DependerConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) tc) (fd dc3)))))
		(and (exists ((dc1 DependerConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) tc) (pd dc1))) (not (exists ((dc2 DependerConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) tc) (fd dc2)))) (not (exists ((dc3 DecompositionConcretization)) (and (= (src dc3) tc) (fd dc3)))))
	)
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (co tc) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (co dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2))))) (not (exists ((dc3 DependerConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) tc) (or (fd dc3) (pd dc3))))))
		(and (exists ((dc1 DependerConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) tc) (co dc1))) (not (exists ((dc2 DependerConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) tc) (or (fd dc2) (pd dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (src dc3) tc) (or (fd dc3) (pd dc3))))))
	)
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (un tc) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (un dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2) (co dc2))))) (not (exists ((dc3 DependerConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) tc) (or (fd dc3) (pd dc3) (co dc3))))))
		(and (exists ((dc1 DependerConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) tc) (un dc1))) (not (exists ((dc2 DependerConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) tc) (or (fd dc2) (pd dc2) (co dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (src dc3) tc) (or (fd dc3) (pd dc3) (co dc3))))))
	)
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (ps tc) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (ps dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))) (not (exists ((dc3 DependerConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) tc) (or (fd dc3) (pd dc3) (co dc3) (un dc3))))))
		(and (exists ((dc1 DependerConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) tc) (ps dc1))) (not (exists ((dc2 DependerConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) tc) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (src dc3) tc) (or (fd dc3) (pd dc3) (co dc3) (un dc3))))))
	)
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (fs tc) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (fs dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (ps dc2))))) (not (exists ((dc3 DependerConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) tc) (or (fd dc3) (pd dc3) (co dc3) (un dc3) (ps dc3))))))
		(and (exists ((dc1 DependerConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) tc) (fs dc1))) (not (exists ((dc2 DependerConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) tc) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (ps dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (src dc3) tc) (or (fd dc3) (pd dc3) (co dc3) (un dc3) (ps dc3))))))
	)
	true
	false
)))))

;SoftGoal propagation (only Contribution)
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (co sgc) (ite
	(or (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (co cc1))) (exists ((cc2 ContributionConcretization) (cc3 ContributionConcretization)) (and (= (tgt cc2) sgc) (and (= (tgt cc3) sgc) (and (or (fs cc2) (ps cc2)) (or (pd cc3) (fd cc3)))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (un sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (un cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (co cc2)))) (not (exists ((cc3 ContributionConcretization) (cc4 ContributionConcretization)) (and (= (tgt cc3) sgc) (and (= (tgt cc4) sgc) (and (or (fs cc3) (ps cc3)) (or (pd cc4) (fd cc4))))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (fs sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (fs cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (un cc2) (co cc2) (pd cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (ps sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (ps cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (fs cc2) (un cc2) (co cc2) (pd cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (fd sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (fd cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (fs cc2) (ps cc2) (un cc2) (co cc2))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (pd sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (pd cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (fs cc2) (ps cc2) (un cc2) (co cc2) (fd cc2))))))
	true
	false
)))))

;Resource propagation (only Dependee)
(assert (forall ((rc ResourceConcretization)) (=> (not (inited rc)) (= (fd rc) (ite
	(exists ((dc DependeeConcretization)) (and (= (srcEndpoint dc) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc) rc) (fd dc)))
	true
	false
)))))
(assert (forall ((rc ResourceConcretization)) (=> (not (inited rc))  (= (pd rc) (ite
	(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) rc) (pd dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) rc) (fd dc2)))))
	true
	false
)))))
(assert (forall ((rc ResourceConcretization)) (=> (not (inited rc))  (= (co rc) (ite
	(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) rc) (co dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) rc) (or (fd dc2) (pd dc2))))))
	true
	false
)))))
(assert (forall ((rc ResourceConcretization)) (=> (not (inited rc))  (= (un rc) (ite
	(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) rc) (un dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) rc) (or (fd dc2) (pd dc2) (co dc2))))))
	true
	false
)))))
(assert (forall ((rc ResourceConcretization)) (=> (not (inited rc))  (= (ps rc) (ite
	(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) rc) (ps dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) rc) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))))
	true
	false
)))))
(assert (forall ((rc ResourceConcretization)) (=> (not (inited rc))  (= (fs rc) (ite
	(and (exists ((dc1 DependeeConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) rc) (fs dc1))) (not (exists ((dc2 DependeeConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) rc) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (ps dc2))))))
	true
	false
)))))
[/template]

[template public encodeIStarMAVO(istar : IStar)]
[comment @main/]
[file ('encoding.smt2', false, 'UTF-8')]
[encodeConstants(istar)/]
[encodeModel(istar)/]
[encodeAnalysis(istar)/]
[encodeConstraints(istar)/]
[encodePropagation(istar)/]
[/file]
[/template]
