[comment encoding = UTF-8 /]
[module IStarMAVOToSMTLIB_M2T('http://se.cs.toronto.edu/mmtf/MAVO', 'http://se.cs.toronto.edu/modelepedia/IStar_MAVO')]

[template private intentionalElementName(ie : IntentionalElement)]
[ie.name.replaceAll(' ', '')/]
[/template]

[template private linkName(end : EndReference)]
[end.src.name.replaceAll(' ', '')/]2[end.tgt.name.replaceAll(' ', '')/]
[/template]

[template private linkName(component : ComponentsReference)]
[component.src.name.replaceAll(' ', '')/]2[component.tgt.name.replaceAll(' ', '')/]
[/template]

[template private linkName(contribution : Contribution)]
[contribution.contributor.name.replaceAll(' ', '')/]2[contribution.contributee.name.replaceAll(' ', '')/]
[/template]

[template private linkName(depender : DependerReference)]
[depender.tgt.name.replaceAll(' ', '')/]2[depender.src.dependum.name.replaceAll(' ', '')/]
[/template]

[template private linkName(dependee : DependeeReference)]
[dependee.src.dependum.name.replaceAll(' ', '')/]2[dependee.tgt.name.replaceAll(' ', '')/]
[/template]

[template private encodeInitialAnalysis(ie : IntentionalElement)]
;[ie.name.replaceAll(' ', '')/] initial analysis tag
(assert (forall ((c [ie.eClass().name/]Concretization)) (=>
	(node [ie.name.replaceAll(' ', '')/] c)
[if (ie.fullySatisfied or ie.partiallySatisfied or ie.unknown or ie.conflict or ie.partiallyDenied or ie.fullyDenied)]
	(and
		(= (fs c) [if (ie.fullySatisfied)]true[else]false[/if])
		(= (ps c) [if (ie.partiallySatisfied)]true[else]false[/if])
		(= (un c) [if (ie.unknown)]true[else]false[/if])
		(= (co c) [if (ie.conflict)]true[else]false[/if])
		(= (pd c) [if (ie.partiallyDenied)]true[else]false[/if])
		(= (fd c) [if (ie.fullyDenied)]true[else]false[/if])
		(= (inited c) true)
	)
[else]
	(= (inited c) false)
[/if]
)))
[/template]

[template private encodeMetamodelConstant(sort : String, fun : String, name : String, funConst : String, const : String)]
;[name/] [funConst/] constant
(assert (forall ((c [sort/])) (=>
	([fun/] [name/] c)
	(= ([funConst/] c) [const/])
)))
[/template]

[template private encodeMetamodelConstraint(sort : String, fun : String, name : String, funSrc : String, funOverloadSrc : String, nameSrc : String, funTgt : String, funOverloadTgt : String, nameTgt : String)]
;[name/] endpoints
(assert (forall ((c [sort/])) (=>
	([fun/] [name/] c)
	(and
		([funSrc/] [nameSrc/] ([if (funOverloadSrc.oclIsUndefined())]src[else](as src ([funOverloadSrc/]))[/if] c))
		([funTgt/] [nameTgt/] ([if (funOverloadTgt.oclIsUndefined())]tgt[else](as tgt ([funOverloadTgt/]))[/if] c))
	)
)))
[/template]

[template private encodeMayConstraint(sort : String, fun : String, name : String)]
;[name/] Exists
(assert	(exists ((c [sort/])) ([fun/] [name/] c)))
[/template]

[template private encodeSetConstraint(sort : String, fun : String, name : String)]
;[name/] is Unique
(assert	(forall ((c1 [sort/]) (c2 [sort/])) (=>
	(and ([fun/] [name/] c1) ([fun/] [name/] c2))
	(= c1 c2)
)))
[/template]

[template private encodeVarConstraint(sort : String, fun : String, name1 : String, name2 : String)]
;[name1/] is Distinct from [name2/]
(assert	(forall ((c [sort/])) (=>
	([fun/] [name1/] c)
	(not ([fun/] [name2/] c))
)))
[/template]

[template private encodeConstants(istar : IStar)]
;Endpoint Types
(declare-const ENDPOINT_TASK Int)
(declare-const ENDPOINT_GOAL Int)
(declare-const ENDPOINT_SOFTGOAL Int)
(declare-const ENDPOINT_RESOURCE Int)
(assert (= ENDPOINT_TASK 1))
(assert (= ENDPOINT_GOAL 2))
(assert (= ENDPOINT_SOFTGOAL 3))
(assert (= ENDPOINT_RESOURCE 4))

;Contribution Types
(declare-const CONTRIBUTION_MAKE Int)
(declare-const CONTRIBUTION_HELP Int)
(declare-const CONTRIBUTION_SOMEPLUS Int)
(declare-const CONTRIBUTION_BREAK Int)
(declare-const CONTRIBUTION_HURT Int)
(declare-const CONTRIBUTION_SOMEMINUS Int)
(declare-const CONTRIBUTION_UNKNOWN Int)
(assert (= CONTRIBUTION_MAKE 11))
(assert (= CONTRIBUTION_HELP 12))
(assert (= CONTRIBUTION_SOMEPLUS 13))
(assert (= CONTRIBUTION_BREAK 14))
(assert (= CONTRIBUTION_HURT 15))
(assert (= CONTRIBUTION_SOMEMINUS 16))
(assert (= CONTRIBUTION_UNKNOWN 17))
[/template]

[template private encodeModel(istar : IStar)]

;Model
(declare-datatypes () ((Task
[for (task : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Task)))]
	[intentionalElementName(task)/]
[/for]
)))
(declare-datatypes () ((Goal
[for (goal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Goal)))]
	[intentionalElementName(goal)/]
[/for]
)))
(declare-datatypes () ((SoftGoal
[for (softgoal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(SoftGoal)))]
	[intentionalElementName(softgoal)/]
[/for]
)))
(declare-datatypes () ((Resource
[for (resource : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Resource)))]
	[intentionalElementName(resource)/]
[/for]
)))
(declare-datatypes () ((MeansEnd
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (end : EndReference | task.oclAsType(Task).end)]
	[linkName(end)/]
		[/for]
	[/for]
[/for]
)))
(declare-datatypes () ((Decomposition
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (component : ComponentsReference | task.oclAsType(Task).components)]
	[linkName(component)/]
		[/for]
	[/for]
[/for]
)))
(declare-datatypes () ((Contribution
[for (actor : Actor | istar.actors)]
	[for (softgoal : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(SoftGoal)))]
		[for (contribution : Contribution | softgoal.oclAsType(SoftGoal).contributionsAsContributee)]
	[linkName(contribution)/]
		[/for]
	[/for]
[/for]
)))
(declare-datatypes () ((Depender
[for (dependency : Dependency | istar.dependencies)]
	[for (depender : DependerReference | dependency.depender)]
		[if (not depender.tgt.oclIsTypeOf(Actor))]
	[linkName(depender)/]
		[/if]
	[/for]
[/for]
)))
(declare-datatypes () ((Dependee
[for (dependency : Dependency | istar.dependencies)]
	[for (dependee : DependeeReference | dependency.dependee)]
		[if (not dependee.tgt.oclIsTypeOf(Actor))]
	[linkName(dependee)/]
		[/if]
	[/for]
[/for]
)))

;Concretizations
(declare-sort TaskConcretization)
(declare-sort GoalConcretization)
(declare-sort SoftGoalConcretization)
(declare-sort ResourceConcretization)
(declare-sort MeansEndConcretization)
(declare-sort DecompositionConcretization)
(declare-sort ContributionConcretization)
(declare-sort DependerConcretization)
(declare-sort DependeeConcretization)
(declare-fun node (Task TaskConcretization) Bool)
(declare-fun node (Goal GoalConcretization) Bool)
(declare-fun node (SoftGoal SoftGoalConcretization) Bool)
(declare-fun node (Resource ResourceConcretization) Bool)
(declare-fun edge (MeansEnd MeansEndConcretization) Bool)
(declare-fun src (MeansEndConcretization) TaskConcretization)
(declare-fun tgt (MeansEndConcretization) GoalConcretization)
(declare-fun edge (Decomposition DecompositionConcretization) Bool)
(declare-fun tgtEndpoint (DecompositionConcretization) Int)
(declare-fun src (DecompositionConcretization) TaskConcretization)
(declare-fun tgt (DecompositionConcretization) TaskConcretization)
(declare-fun tgt (DecompositionConcretization) GoalConcretization)
(declare-fun tgt (DecompositionConcretization) SoftGoalConcretization)
(declare-fun tgt (DecompositionConcretization) ResourceConcretization)
(declare-fun edge (Contribution ContributionConcretization) Bool)
(declare-fun srcEndpoint (ContributionConcretization) Int)
(declare-fun type (ContributionConcretization) Int)
(declare-fun src (ContributionConcretization) TaskConcretization)
(declare-fun src (ContributionConcretization) GoalConcretization)
(declare-fun src (ContributionConcretization) SoftGoalConcretization)
(declare-fun src (ContributionConcretization) ResourceConcretization)
(declare-fun tgt (ContributionConcretization) SoftGoalConcretization)
(declare-fun edge (Depender DependerConcretization) Bool)
(declare-fun srcEndpoint (DependerConcretization) Int)
(declare-fun tgtEndpoint (DependerConcretization) Int)
(declare-fun src (DependerConcretization) TaskConcretization)
(declare-fun src (DependerConcretization) GoalConcretization)
(declare-fun src (DependerConcretization) SoftGoalConcretization)
(declare-fun src (DependerConcretization) ResourceConcretization)
(declare-fun tgt (DependerConcretization) TaskConcretization)
(declare-fun tgt (DependerConcretization) GoalConcretization)
(declare-fun tgt (DependerConcretization) SoftGoalConcretization)
(declare-fun tgt (DependerConcretization) ResourceConcretization)
(declare-fun edge (Dependee DependeeConcretization) Bool)
(declare-fun srcEndpoint (DependeeConcretization) Int)
(declare-fun tgtEndpoint (DependeeConcretization) Int)
(declare-fun src (DependeeConcretization) TaskConcretization)
(declare-fun src (DependeeConcretization) GoalConcretization)
(declare-fun src (DependeeConcretization) SoftGoalConcretization)
(declare-fun src (DependeeConcretization) ResourceConcretization)
(declare-fun tgt (DependeeConcretization) TaskConcretization)
(declare-fun tgt (DependeeConcretization) GoalConcretization)
(declare-fun tgt (DependeeConcretization) SoftGoalConcretization)
(declare-fun tgt (DependeeConcretization) ResourceConcretization)
[/template]

[template private encodeAnalysis(istar : IStar)]

;Analysis
(declare-fun inited (TaskConcretization) Bool)
(declare-fun inited (GoalConcretization) Bool)
(declare-fun inited (SoftGoalConcretization) Bool)
(declare-fun inited (ResourceConcretization) Bool)
(declare-fun fsSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun fsTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun fsSrcEndpoint (ContributionConcretization) Bool)
(declare-fun psSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun psTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun psSrcEndpoint (ContributionConcretization) Bool)
(declare-fun unSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun unTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun unSrcEndpoint (ContributionConcretization) Bool)
(declare-fun coSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun coTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun coSrcEndpoint (ContributionConcretization) Bool)
(declare-fun pdSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun pdTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun pdSrcEndpoint (ContributionConcretization) Bool)
(declare-fun fdSrcEndpoint (MeansEndConcretization) Bool)
(declare-fun fdTgtEndpoint (DecompositionConcretization) Bool)
(declare-fun fdSrcEndpoint (ContributionConcretization) Bool)
(declare-fun fs (TaskConcretization) Bool)
(declare-fun fs (GoalConcretization) Bool)
(declare-fun fs (SoftGoalConcretization) Bool)
(declare-fun fs (ResourceConcretization) Bool)
(declare-fun fs (MeansEndConcretization) Bool)
(declare-fun fs (DecompositionConcretization) Bool)
(declare-fun fs (ContributionConcretization) Bool)
(declare-fun ps (TaskConcretization) Bool)
(declare-fun ps (GoalConcretization) Bool)
(declare-fun ps (SoftGoalConcretization) Bool)
(declare-fun ps (ResourceConcretization) Bool)
(declare-fun ps (MeansEndConcretization) Bool)
(declare-fun ps (DecompositionConcretization) Bool)
(declare-fun ps (ContributionConcretization) Bool)
(declare-fun un (TaskConcretization) Bool)
(declare-fun un (GoalConcretization) Bool)
(declare-fun un (SoftGoalConcretization) Bool)
(declare-fun un (ResourceConcretization) Bool)
(declare-fun un (MeansEndConcretization) Bool)
(declare-fun un (DecompositionConcretization) Bool)
(declare-fun un (ContributionConcretization) Bool)
(declare-fun co (TaskConcretization) Bool)
(declare-fun co (GoalConcretization) Bool)
(declare-fun co (SoftGoalConcretization) Bool)
(declare-fun co (ResourceConcretization) Bool)
(declare-fun co (MeansEndConcretization) Bool)
(declare-fun co (DecompositionConcretization) Bool)
(declare-fun co (ContributionConcretization) Bool)
(declare-fun pd (TaskConcretization) Bool)
(declare-fun pd (GoalConcretization) Bool)
(declare-fun pd (SoftGoalConcretization) Bool)
(declare-fun pd (ResourceConcretization) Bool)
(declare-fun pd (MeansEndConcretization) Bool)
(declare-fun pd (DecompositionConcretization) Bool)
(declare-fun pd (ContributionConcretization) Bool)
(declare-fun fd (TaskConcretization) Bool)
(declare-fun fd (GoalConcretization) Bool)
(declare-fun fd (SoftGoalConcretization) Bool)
(declare-fun fd (ResourceConcretization) Bool)
(declare-fun fd (MeansEndConcretization) Bool)
(declare-fun fd (DecompositionConcretization) Bool)
(declare-fun fd (ContributionConcretization) Bool)
(assert (forall ((mec MeansEndConcretization)) (= (fsSrcEndpoint mec) (fs (src mec)))))
(assert (forall ((mec MeansEndConcretization)) (= (psSrcEndpoint mec) (ps (src mec)))))
(assert (forall ((mec MeansEndConcretization)) (= (unSrcEndpoint mec) (un (src mec)))))
(assert (forall ((mec MeansEndConcretization)) (= (coSrcEndpoint mec) (co (src mec)))))
(assert (forall ((mec MeansEndConcretization)) (= (pdSrcEndpoint mec) (pd (src mec)))))
(assert (forall ((mec MeansEndConcretization)) (= (fdSrcEndpoint mec) (fd (src mec)))))
(assert (forall ((mec MeansEndConcretization)) (= (fs mec) (fsSrcEndpoint mec))))
(assert (forall ((mec MeansEndConcretization)) (= (ps mec) (psSrcEndpoint mec))))
(assert (forall ((mec MeansEndConcretization)) (= (un mec) (unSrcEndpoint mec))))
(assert (forall ((mec MeansEndConcretization)) (= (co mec) (coSrcEndpoint mec))))
(assert (forall ((mec MeansEndConcretization)) (= (pd mec) (pdSrcEndpoint mec))))
(assert (forall ((mec MeansEndConcretization)) (= (fd mec) (fdSrcEndpoint mec))))
(assert (forall ((dc DecompositionConcretization)) (= (fsTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(fs ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(fs ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(fs ((as tgt (SoftGoalConcretization)) dc))
				(fs ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (psTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(ps ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(ps ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(ps ((as tgt (SoftGoalConcretization)) dc))
				(ps ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (unTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(un ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(un ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(un ((as tgt (SoftGoalConcretization)) dc))
				(un ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (coTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(co ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(co ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(co ((as tgt (SoftGoalConcretization)) dc))
				(co ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (pdTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(pd ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(pd ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(pd ((as tgt (SoftGoalConcretization)) dc))
				(pd ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (fdTgtEndpoint dc)
	(ite (= (tgtEndpoint dc) ENDPOINT_TASK)
		(fd ((as tgt (TaskConcretization)) dc))
		(ite (= (tgtEndpoint dc) ENDPOINT_GOAL)
			(fd ((as tgt (GoalConcretization)) dc))
			(ite (= (tgtEndpoint dc) ENDPOINT_SOFTGOAL)
				(fd ((as tgt (SoftGoalConcretization)) dc))
				(fd ((as tgt (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (fs dc) (fsTgtEndpoint dc))))
(assert (forall ((dc DecompositionConcretization)) (= (ps dc) (psTgtEndpoint dc))))
(assert (forall ((dc DecompositionConcretization)) (= (un dc) (unTgtEndpoint dc))))
(assert (forall ((dc DecompositionConcretization)) (= (co dc) (coTgtEndpoint dc))))
(assert (forall ((dc DecompositionConcretization)) (= (pd dc) (pdTgtEndpoint dc))))
(assert (forall ((dc DecompositionConcretization)) (= (fd dc) (fdTgtEndpoint dc))))
(assert (forall ((cc ContributionConcretization)) (= (fsSrcEndpoint cc)
	(ite (= (srcEndpoint cc) ENDPOINT_TASK)
		(fs ((as src (TaskConcretization)) cc))
		(ite (= (srcEndpoint cc) ENDPOINT_GOAL)
			(fs ((as src (GoalConcretization)) cc))
			(ite (= (srcEndpoint cc) ENDPOINT_SOFTGOAL)
				(fs ((as src (SoftGoalConcretization)) cc))
				(fs ((as src (ResourceConcretization)) cc))
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (psSrcEndpoint cc)
	(ite (= (srcEndpoint cc) ENDPOINT_TASK)
		(ps ((as src (TaskConcretization)) cc))
		(ite (= (srcEndpoint cc) ENDPOINT_GOAL)
			(ps ((as src (GoalConcretization)) cc))
			(ite (= (srcEndpoint cc) ENDPOINT_SOFTGOAL)
				(ps ((as src (SoftGoalConcretization)) cc))
				(ps ((as src (ResourceConcretization)) cc))
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (unSrcEndpoint cc)
	(ite (= (srcEndpoint cc) ENDPOINT_TASK)
		(un ((as src (TaskConcretization)) cc))
		(ite (= (srcEndpoint cc) ENDPOINT_GOAL)
			(un ((as src (GoalConcretization)) cc))
			(ite (= (srcEndpoint cc) ENDPOINT_SOFTGOAL)
				(un ((as src (SoftGoalConcretization)) cc))
				(un ((as src (ResourceConcretization)) cc))
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (coSrcEndpoint cc)
	(ite (= (srcEndpoint cc) ENDPOINT_TASK)
		(co ((as src (TaskConcretization)) cc))
		(ite (= (srcEndpoint cc) ENDPOINT_GOAL)
			(co ((as src (GoalConcretization)) cc))
			(ite (= (srcEndpoint cc) ENDPOINT_SOFTGOAL)
				(co ((as src (SoftGoalConcretization)) cc))
				(co ((as src (ResourceConcretization)) cc))
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (pdSrcEndpoint cc)
	(ite (= (srcEndpoint cc) ENDPOINT_TASK)
		(pd ((as src (TaskConcretization)) cc))
		(ite (= (srcEndpoint cc) ENDPOINT_GOAL)
			(pd ((as src (GoalConcretization)) cc))
			(ite (= (srcEndpoint cc) ENDPOINT_SOFTGOAL)
				(pd ((as src (SoftGoalConcretization)) cc))
				(pd ((as src (ResourceConcretization)) cc))
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (fdSrcEndpoint cc)
	(ite (= (srcEndpoint cc) ENDPOINT_TASK)
		(fd ((as src (TaskConcretization)) cc))
		(ite (= (srcEndpoint cc) ENDPOINT_GOAL)
			(fd ((as src (GoalConcretization)) cc))
			(ite (= (srcEndpoint cc) ENDPOINT_SOFTGOAL)
				(fd ((as src (SoftGoalConcretization)) cc))
				(fd ((as src (ResourceConcretization)) cc))
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (fs cc)
	(ite (= (type cc) CONTRIBUTION_MAKE)
		(ite (fsSrcEndpoint cc)
			true
			false
		)
		false
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (ps cc)
	(ite (= (type cc) CONTRIBUTION_MAKE)
		(ite (psSrcEndpoint cc)
			true
			false
		)
		(ite (or (= (type cc) CONTRIBUTION_HELP) (= (type cc) CONTRIBUTION_SOMEPLUS))
			(ite (or (fsSrcEndpoint cc) (psSrcEndpoint cc))
				true
				false
			)
			(ite (or (= (type cc) CONTRIBUTION_BREAK) (= (type cc) CONTRIBUTION_HURT) (= (type cc) CONTRIBUTION_SOMEMINUS))
				(ite (or (pdSrcEndpoint cc) (fdSrcEndpoint cc))
					true
					false
				)
				false
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (un cc)
	(ite (= (type cc) CONTRIBUTION_UNKNOWN)
		true
		(ite (unSrcEndpoint cc)
			true
			false
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (co cc)
	(ite (= (type cc) CONTRIBUTION_UNKNOWN)
		false
		(ite (coSrcEndpoint cc)
			true
			false
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (pd cc)
	(ite (= (type cc) CONTRIBUTION_MAKE)
		(ite (pdSrcEndpoint cc)
			true
			false
		)
		(ite (or (= (type cc) CONTRIBUTION_HELP) (= (type cc) CONTRIBUTION_SOMEPLUS))
			(ite (or (pdSrcEndpoint cc) (fdSrcEndpoint cc))
				true
				false
			)
			(ite (= (type cc) CONTRIBUTION_BREAK)
				(ite (psSrcEndpoint cc)
					true
					false
				)
				(ite (or (= (type cc) CONTRIBUTION_HURT) (= (type cc) CONTRIBUTION_SOMEMINUS))
					(ite (or (fsSrcEndpoint cc) (psSrcEndpoint cc))
						true
						false
					)
					false
				)
			)
		)
	)
)))
(assert (forall ((cc ContributionConcretization)) (= (fd cc)
	(ite (= (type cc) CONTRIBUTION_MAKE)
		(ite (fdSrcEndpoint cc)
			true
			false
		)
		(ite (= (type cc) CONTRIBUTION_BREAK)
			(ite (fsSrcEndpoint cc)
				true
				false
			)
			false
		)
	)
)))
[/template]

[template private encodeConstraints(istar : IStar)]

;Complete Model
(assert	(forall ((tc TaskConcretization)) (or
[for (task : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Task)))]
	(node [intentionalElementName(task)/] tc)
[/for]
)))
(assert (forall ((gc GoalConcretization)) (or
[for (goal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Goal)))]
	(node [intentionalElementName(goal)/] gc)
[/for]
)))
(assert (forall ((sgc SoftGoalConcretization)) (or
[for (softgoal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(SoftGoal)))]
	(node [intentionalElementName(softgoal)/] sgc)
[/for]
)))
(assert (forall ((rc ResourceConcretization)) (or
[for (resource : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Resource)))]
	(node [intentionalElementName(resource)/] rc)
[/for]
)))
(assert (forall ((mec MeansEndConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (end : EndReference | task.oclAsType(Task).end)]
	(edge [linkName(end)/] mec)
		[/for]
	[/for]
[/for]
)))
(assert (forall ((dc DecompositionConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (component : ComponentsReference | task.oclAsType(Task).components)]
	(edge [linkName(component)/] dc)
		[/for]
	[/for]
[/for]
)))
(assert (forall ((cc ContributionConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (softgoal : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(SoftGoal)))]
		[for (contribution : Contribution | softgoal.oclAsType(SoftGoal).contributionsAsContributee)]
	(edge [linkName(contribution)/] cc)
		[/for]
	[/for]
[/for]
)))

;Model Elements
[for (task : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Task)))]
[encodeInitialAnalysis(task)/]
	[if (not task.may)]
[encodeMayConstraint('TaskConcretization', 'node', intentionalElementName(task))/]
	[/if]
	[if (not task.set)]
[encodeSetConstraint('TaskConcretization', 'node', intentionalElementName(task))/]
	[/if]
	[if (not task.var)]
		[for (actor2 : Actor | istar.actors)]
			[for (task2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Task)))]
				[if (not (task.name = task2.name))]
[encodeVarConstraint('TaskConcretization', 'node', intentionalElementName(task), intentionalElementName(task2))/]
				[/if]
			[/for]
		[/for]
	[/if]
[/for]
[for (goal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Goal)))]
[encodeInitialAnalysis(goal)/]
	[if (not goal.may)]
[encodeMayConstraint('GoalConcretization', 'node', intentionalElementName(goal))/]
	[/if]
	[if (not goal.set)]
[encodeSetConstraint('GoalConcretization', 'node', intentionalElementName(goal))/]
	[/if]
	[if (not goal.var)]
		[for (actor2 : Actor | istar.actors)]
			[for (goal2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Goal)))]
				[if (not (goal.name = goal2.name))]
[encodeVarConstraint('GoalConcretization', 'node', intentionalElementName(goal), intentionalElementName(goal2))/]
				[/if]
			[/for]
		[/for]
	[/if]
[/for]
[for (softgoal : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(SoftGoal)))]
[encodeInitialAnalysis(softgoal)/]
	[if (not softgoal.may)]
[encodeMayConstraint('SoftGoalConcretization', 'node', intentionalElementName(softgoal))/]
	[/if]
	[if (not softgoal.set)]
[encodeSetConstraint('SoftGoalConcretization', 'node', intentionalElementName(softgoal))/]
	[/if]
	[if (not softgoal.var)]
		[for (actor2 : Actor | istar.actors)]
			[for (softgoal2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(SoftGoal)))]
				[if (not (softgoal.name = softgoal2.name))]
[encodeVarConstraint('SoftGoalConcretization', 'node', intentionalElementName(softgoal), intentionalElementName(softgoal2))/]
				[/if]
			[/for]
		[/for]
	[/if]
[/for]
[for (resource : IntentionalElement | istar.actors->collect(intentionalElements)->addAll(istar.dependums)->select(oclIsTypeOf(Resource)))]
[encodeInitialAnalysis(resource)/]
	[if (not resource.may)]
[encodeMayConstraint('ResourceConcretization', 'node', intentionalElementName(resource))/]
	[/if]
	[if (not resource.set)]
[encodeSetConstraint('ResourceConcretization', 'node', intentionalElementName(resource))/]
	[/if]
	[if (not resource.var)]
		[for (actor2 : Actor | istar.actors)]
			[for (resource2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Resource)))]
				[if (not (resource.name = resource2.name))]
[encodeVarConstraint('ResourceConcretization', 'node', intentionalElementName(resource), intentionalElementName(resource2))/]
				[/if]
			[/for]
		[/for]
	[/if]
[/for]
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (end : EndReference | task.oclAsType(Task).end)]
[encodeMetamodelConstraint('MeansEndConcretization', 'edge', linkName(end), 'node', null, intentionalElementName(end.src), 'node', null, intentionalElementName(end.tgt))/]
			[if (not end.may)]
[encodeMayConstraint('MeansEndConcretization', 'edge', linkName(end))/]
			[/if]
			[if (not end.set)]
[encodeSetConstraint('MeansEndConcretization', 'edge', linkName(end))/]
			[/if]
			[if (not end.var)]
				[for (actor2 : Actor | istar.actors)]
					[for (task2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Task)))]
						[for (end2 : EndReference | task2.oclAsType(Task).end)]
							[if (not (linkName(end) = linkName(end2)))]
[encodeVarConstraint('MeansEndConcretization', 'edge', linkName(end), linkName(end2))/]
							[/if]
						[/for]
					[/for]
				[/for]
			[/if]
		[/for]
	[/for]
[/for]
[for (actor : Actor | istar.actors)]
	[for (task : IntentionalElement | actor.intentionalElements->select(oclIsTypeOf(Task)))]
		[for (component : ComponentsReference | task.oclAsType(Task).components)]
[encodeMetamodelConstant('DecompositionConcretization', 'edge', linkName(component), 'tgtEndpoint', 'ENDPOINT_'+component.tgt.eClass().name.toUpper())/]
			[if (component.tgt.oclIsTypeOf(Task))]
[encodeMetamodelConstraint('DecompositionConcretization', 'edge', linkName(component), 'node', null, intentionalElementName(component.src), 'node', 'TaskConcretization', intentionalElementName(component.tgt))/]
			[elseif (component.tgt.oclIsTypeOf(Goal))]
[encodeMetamodelConstraint('DecompositionConcretization', 'edge', linkName(component), 'node', null, intentionalElementName(component.src), 'node', 'GoalConcretization', intentionalElementName(component.tgt))/]
			[elseif (component.tgt.oclIsTypeOf(SoftGoal))]
[encodeMetamodelConstraint('DecompositionConcretization', 'edge', linkName(component), 'node', null, intentionalElementName(component.src), 'node', 'SoftGoalConcretization', intentionalElementName(component.tgt))/]
			[/if]
			[if (not component.may)]
[encodeMayConstraint('DecompositionConcretization', 'edge', linkName(component))/]
			[/if]
			[if (not component.set)]
[encodeSetConstraint('DecompositionConcretization', 'edge', linkName(component))/]
			[/if]
			[if (not component.var)]
				[for (actor2 : Actor | istar.actors)]
					[for (task2 : IntentionalElement | actor2.intentionalElements->select(oclIsTypeOf(Task)))]
						[for (component2 : ComponentsReference | task2.oclAsType(Task).components)]
							[if (not (linkName(component) = linkName(component2)))]
[encodeVarConstraint('DecompositionConcretization', 'edge', linkName(component), linkName(component2))/]
							[/if]
						[/for]
					[/for]
				[/for]
			[/if]
		[/for]
	[/for]
[/for]
[for (actor : Actor | istar.actors)]
	[for (contribution : Contribution | actor.contributions)]
[encodeMetamodelConstant('ContributionConcretization', 'edge', linkName(contribution), 'type', 'CONTRIBUTION_'+contribution.type.toUpper())/]
[encodeMetamodelConstant('ContributionConcretization', 'edge', linkName(contribution), 'srcEndpoint', 'ENDPOINT_'+contribution.contributor.eClass().name.toUpper())/]
		[if (contribution.contributor.oclIsTypeOf(Task))]
[encodeMetamodelConstraint('ContributionConcretization', 'edge', linkName(contribution), 'node', 'TaskConcretization', intentionalElementName(contribution.contributor), 'node', null, intentionalElementName(contribution.contributee))/]
		[elseif (contribution.contributor.oclIsTypeOf(Goal))]
[encodeMetamodelConstraint('ContributionConcretization', 'edge', linkName(contribution), 'node', 'GoalConcretization', intentionalElementName(contribution.contributor), 'node', null, intentionalElementName(contribution.contributee))/]
		[elseif (contribution.contributor.oclIsTypeOf(SoftGoal))]
[encodeMetamodelConstraint('ContributionConcretization', 'edge', linkName(contribution), 'node', 'SoftGoalConcretization', intentionalElementName(contribution.contributor), 'node', null, intentionalElementName(contribution.contributee))/]
		[/if]
		[if (not contribution.may)]
[encodeMayConstraint('ContributionConcretization', 'edge', linkName(contribution))/]
		[/if]
		[if (not contribution.set)]
[encodeSetConstraint('ContributionConcretization', 'edge', linkName(contribution))/]
		[/if]
		[if (not contribution.var)]
			[for (actor2 : Actor | istar.actors)]
				[for (contribution2 : Contribution | actor2.contributions)]
					[if (not (linkName(contribution) = linkName(contribution2)))]
[encodeVarConstraint('ContributionConcretization', 'edge', linkName(contribution), linkName(contribution2))/]
					[/if]
				[/for]
			[/for]
		[/if]
	[/for]
[/for]
[/template]

[template private encodePropagation(istar : IStar)]

;MeansEnd propagation
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (fs gc) (ite
	(exists ((mec MeansEndConcretization)) (and (= (tgt mec) gc) (fs mec)))
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (ps gc) (ite
	(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (ps mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (fs mec2)))))
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (un gc) (ite
	(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (un mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2))))))
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (co gc) (ite
	(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (co mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2) (un mec2))))))
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (pd gc) (ite
	(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (pd mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2) (un mec2) (co mec2))))))
	true
	false
)))))
(assert	(forall ((gc GoalConcretization)) (=> (not (inited gc)) (= (fd gc) (ite
	(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) gc) (fd mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) gc) (or (fs mec2) (ps mec2) (un mec2) (co mec2) (pd mec2))))))
	true
	false
)))))

;Decomposition propagation
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc)) (= (fd tc) (ite
	(exists ((dc DecompositionConcretization)) (and (= (src dc) tc) (fd dc)))
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (pd tc) (ite
	(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (pd dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (fd dc2)))))
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (co tc) (ite
	(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (co dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2))))))
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (un tc) (ite
	(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (un dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2) (co dc2))))))
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (ps tc) (ite
	(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (ps dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))))
	true
	false
)))))
(assert (forall ((tc TaskConcretization)) (=> (not (inited tc))  (= (fs tc) (ite
	(and (exists ((dc1 DecompositionConcretization)) (and (= (src dc1) tc) (fs dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (src dc2) tc) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (ps dc2))))))
	true
	false
)))))

;Contribution propagation
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (co sgc) (ite
	(or (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (co cc1))) (exists ((cc2 ContributionConcretization) (cc3 ContributionConcretization)) (and (= (tgt cc2) sgc) (and (= (tgt cc3) sgc) (and (or (fs cc2) (ps cc2)) (or (pd cc3) (fd cc3)))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (un sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (un cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (co cc2)))) (not (exists ((cc3 ContributionConcretization) (cc4 ContributionConcretization)) (and (= (tgt cc3) sgc) (and (= (tgt cc4) sgc) (and (or (fs cc3) (ps cc3)) (or (pd cc4) (fd cc4))))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (fs sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (fs cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (un cc2) (co cc2) (pd cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (ps sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (ps cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (fs cc2) (un cc2) (co cc2) (pd cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (fd sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (fd cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (fs cc2) (ps cc2) (un cc2) (co cc2))))))
	true
	false
)))))
(assert (forall ((sgc SoftGoalConcretization)) (=> (not (inited sgc)) (= (pd sgc) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) sgc) (pd cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) sgc) (or (fs cc2) (ps cc2) (un cc2) (co cc2) (fd cc2))))))
	true
	false
)))))
[/template]

[template public encodeIStarMAVO(istar : IStar)]
[comment @main/]
[file ('encoding.smt2', false, 'UTF-8')]
[encodeConstants(istar)/]
[encodeModel(istar)/]
[encodeAnalysis(istar)/]
[encodeConstraints(istar)/]
[encodePropagation(istar)/]
[/file]
[/template]
