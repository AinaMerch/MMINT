[comment encoding = UTF-8 /]
[module EcoreMAVOToSMTLIBUtils_M2T('http://www.eclipse.org/emf/2002/Ecore', 'http://se.cs.toronto.edu/MAVO')]

[query public getObjectsOfType(root : EObject, eclass : EClass) : Sequence(OclAny) =
	root.eAllContents()->select(eClass().name = eclass.name)
/]

[query public getObjectsOfKind(root : EObject, eclass : EClass) : Sequence(OclAny) =
	root.eAllContents()->select(eClass().name = eclass.name or eClass().eAllSuperTypes->exists(name = eclass.name))
/]

[query public getGraphFunction(eclass : EClass) : String =
	if eclass.eAnnotations->exists(source = 'gmf.node') then 'node' else if eclass.eAnnotations->exists(source = 'gmf.link') then 'edge' else null endif endif
/]

[query public getMAVOElements(root : EObject) : Sequence(MAVOElement) =
	root.eAllContents(MAVOElement)
/]

[query public getMAVONodes(root : EObject) : Sequence(MAVOElement) =
	root.getMAVOElements()->select(eClass().getGraphFunction() = 'node')
/]

[query public getMAVOEdges(root : EObject) : Sequence(MAVOElement) =
	root.getMAVOElements()->select(eClass().getGraphFunction() = 'edge')
/]

[query public asMAVOElements(objects : Sequence(OclAny)) : Sequence(MAVOElement) =
	objects->collect(oclAsType(MAVOElement))
/]

[query public getMetamodelMAVOClasses(mavoModel : MAVOModel) : Sequence(EClass) =
	mavoModel.eClass().ePackage.eAllContents(EClass)->select(
		not abstract and
		eAllSuperTypes->exists(super : EClass | super.name = 'MAVOElement') and
		eAnnotations->exists(source = 'gmf.node' or source = 'gmf.link')
	)
/]

[query public getAlreadyEncodedMAVOElementsCounter(mavoModel : MAVOModel, currentMAVOClass : EClass) : Integer =
	mavoModel.getMetamodelMAVOClasses()->
	subSequence(1, mavoModel.getMetamodelMAVOClasses()->indexOf(currentMAVOClass))->
	collect(eclass : EClass | mavoModel.getObjectsOfType(eclass))->
	size()
	- mavoModel.getObjectsOfType(currentMAVOClass)->size()
/]

[query private getEdgeFeatureName(eclass : EClass, annotation : String) : String =
	eclass->union(eclass.eAllSuperTypes)->collect(eAnnotations)->any(source = 'gmf.link' and details->exists(key = annotation)).details->any(key = annotation).value
/]

[query public getEdgeSrcFeatureName(eclass : EClass) : String =
	getEdgeFeatureName(eclass, 'source')
/]

[query public getEdgeTgtFeatureName(eclass : EClass) : String =
	getEdgeFeatureName(eclass, 'target')
/]

[query public getUnmergeableIds(mavoModel : MAVOModel, mavoModelObj : MAVOElement) : Sequence(String) =
	invoke(
		'edu.toronto.cs.se.mmint.mavo.library.MAVOUtils',
		'getUnmergeableIds(edu.toronto.cs.se.mmint.mavo.MAVOModel, edu.toronto.cs.se.mmint.mavo.MAVOElement)',
		Sequence{mavoModel, mavoModelObj}
	)
/]

[query public getMAVOClassName(eclass : EClass) : String =
	if (eclass.name = 'Node' or eclass.name = 'Edge') then
		eclass.name + '_'
	else
		eclass.name
	endif
/]

[template public encodeModelMayOnly(mavoModel : MAVOModel)]
;Concretizations
(define-sort NodeType () Int)
	[for (eclass : EClass | mavoModel.getMetamodelMAVOClasses())]
(define-sort [eclass.getMAVOClassName()/] () Int)
		[let function : String = eclass.getGraphFunction()]
(declare-fun [function/] ([eclass.getMAVOClassName()/]) Bool)
		[if (function = 'node')]
(declare-const [eclass.getMAVOClassName().toUpperCase()/] NodeType)
(assert (= [eclass.getMAVOClassName().toUpperCase()/] [i/]))
		[elseif (function = 'edge')]
			[let srcFeature : String = eclass.getEdgeSrcFeatureName()]
			[let tgtFeature : String = eclass.getEdgeTgtFeatureName()]
			[let srcEclass : EClass = eclass.eAllReferences->any(name = srcFeature).eReferenceType]
			[let tgtEclass : EClass = eclass.eAllReferences->any(name = tgtFeature).eReferenceType]
(declare-fun srcType ([eclass.getMAVOClassName()/]) NodeType)
(declare-fun tgtType ([eclass.getMAVOClassName()/]) NodeType)
			[for (endpointEclass : EClass | mavoModel.getMetamodelMAVOClasses())]
				[if (srcEclass.isSuperTypeOf(endpointEclass))]
(declare-fun src ([eclass.getMAVOClassName()/]) [endpointEclass.getMAVOClassName()/])
				[/if]
				[if (tgtEclass.isSuperTypeOf(endpointEclass))]
(declare-fun tgt ([eclass.getMAVOClassName()/]) [endpointEclass.getMAVOClassName()/])
				[/if]
			[/for]
			[/let]
			[/let]
			[/let]
			[/let]
		[/if]
		[/let]
	[/for]

;Model
	[let numTypes : Integer = mavoModel.getMetamodelMAVOClasses()->size()]
	[for (mavoClass : EClass | mavoModel.getMetamodelMAVOClasses())]
		[let counter : Integer = mavoModel.getAlreadyEncodedMAVOElementsCounter(mavoClass)]
		[for (mavoElement : MAVOElement | mavoModel.getObjectsOfType(mavoClass)->asMAVOElements())]
			[let function : String = mavoElement.eClass().getGraphFunction()]
(declare-const [mavoElement.formulaVariable/] Int)[';'+function.toUpperFirst()/]
(assert (= [mavoElement.formulaVariable/] [numTypes+counter+i/]))
			[/let]
		[/for]
		[/let]
	[/for]
	[/let]
;End Model
	[for (mavoElement : MAVOElement | mavoModel.getMAVOEdges())]
		[let srcMavoElement : MAVOElement = mavoElement.eGet(mavoElement.eClass().getEdgeSrcFeatureName()).oclAsType(MAVOElement)]
		[let tgtMavoElement : MAVOElement = mavoElement.eGet(mavoElement.eClass().getEdgeTgtFeatureName()).oclAsType(MAVOElement)]
		[let srcEclass : EClass = srcMavoElement.eClass()]
		[let tgtEclass : EClass = tgtMavoElement.eClass()]
(assert (= (srcType [mavoElement.formulaVariable/]) [srcEclass.getMAVOClassName().toUpperCase()/]))
(assert (= (tgtType [mavoElement.formulaVariable/]) [tgtEclass.getMAVOClassName().toUpperCase()/]))
(assert (= ((as src ([srcEclass.getMAVOClassName()/])) [mavoElement.formulaVariable/]) [srcMavoElement.formulaVariable/]))
(assert (= ((as tgt ([tgtEclass.getMAVOClassName()/])) [mavoElement.formulaVariable/]) [tgtMavoElement.formulaVariable/]))
(assert (=>
	(edge [mavoElement.formulaVariable/])
	(and (node [srcMavoElement.formulaVariable/]) (node [tgtMavoElement.formulaVariable/]))
))
		[/let]
		[/let]
		[/let]
		[/let]
	[/for]
[/template]

[template public encodeMAVOConstraintsMayOnly(mavoModel : MAVOModel)]
;Model is Complete
	[let numTypes : Integer = mavoModel.getMetamodelMAVOClasses()->size()]
	[for (mavoClass : EClass | mavoModel.getMetamodelMAVOClasses())]
		[let mavoClassMavoElements : Integer = mavoModel.getObjectsOfType(mavoClass)->size()]
		[if (mavoClassMavoElements > 0)]
			[let counter : Integer = mavoModel.getAlreadyEncodedMAVOElementsCounter(mavoClass)]
			[let function : String = mavoClass.getGraphFunction()]
(assert	(forall ((c [mavoClass.getMAVOClassName()/])) (=>
	([function/] c)
	(and
		(>= c [numTypes+counter+1/])
		(<= c [numTypes+counter+mavoClassMavoElements/])
	)
)))
			[/let]
			[/let]
		[/if]
		[/let]
	[/for]
	[/let]
	[for (mavoElement : MAVOElement | mavoModel.getMAVOElements())]
		[let function : String = mavoElement.eClass().getGraphFunction()]
		[if (not mavoElement.may)]
;[mavoElement.formulaVariable/] Exists
(assert ([function/] [mavoElement.formulaVariable/]))
		[/if]
		[/let]
	[/for]
[/template]

[template public encodeModel(mavoModel : MAVOModel)]
;Concretizations
(define-sort Node () Int)
(define-sort NodeType () Int)
(define-sort Edge () Int)
	[for (eclass : EClass | mavoModel.getMetamodelMAVOClasses())]
(declare-sort [eclass.getMAVOClassName()/])
		[let function : String = eclass.getGraphFunction()]
(declare-fun [function/] ([function.toUpperFirst()/] [eclass.getMAVOClassName()/]) Bool)
		[if (function = 'node')]
(declare-const [eclass.getMAVOClassName().toUpperCase()/] NodeType)
(assert (= [eclass.getMAVOClassName().toUpperCase()/] [i/]))
		[elseif (function = 'edge')]
			[let srcFeature : String = eclass.getEdgeSrcFeatureName()]
			[let tgtFeature : String = eclass.getEdgeTgtFeatureName()]
			[let srcEclass : EClass = eclass.eAllReferences->any(name = srcFeature).eReferenceType]
			[let tgtEclass : EClass = eclass.eAllReferences->any(name = tgtFeature).eReferenceType]
(declare-fun srcType ([eclass.getMAVOClassName()/]) NodeType)
(declare-fun tgtType ([eclass.getMAVOClassName()/]) NodeType)
			[for (endpointEclass : EClass | mavoModel.getMetamodelMAVOClasses())]
				[if (srcEclass.isSuperTypeOf(endpointEclass))]
(declare-fun src ([eclass.getMAVOClassName()/]) [endpointEclass.getMAVOClassName()/])
				[/if]
				[if (tgtEclass.isSuperTypeOf(endpointEclass))]
(declare-fun tgt ([eclass.getMAVOClassName()/]) [endpointEclass.getMAVOClassName()/])
				[/if]
			[/for]
			[/let]
			[/let]
			[/let]
			[/let]
		[/if]
		[/let]
	[/for]

;Model
	[for (mavoElement : MAVOElement | mavoModel.getMAVOElements())]
		[let numTypes : Integer = mavoModel.getMetamodelMAVOClasses()->size()]
		[let function : String = mavoElement.eClass().getGraphFunction()]
(declare-const [mavoElement.formulaVariable/] [function.toUpperFirst()/])[';'+function.toUpperFirst()/]
(assert (= [mavoElement.formulaVariable/] [numTypes+i/]))
		[/let]
		[/let]
	[/for]
;End Model
	[for (mavoElement : MAVOElement | mavoModel.getMAVOEdges())]
		[let srcMavoElement : MAVOElement = mavoElement.eGet(mavoElement.eClass().getEdgeSrcFeatureName()).oclAsType(MAVOElement)]
		[let tgtMavoElement : MAVOElement = mavoElement.eGet(mavoElement.eClass().getEdgeTgtFeatureName()).oclAsType(MAVOElement)]
		[let srcEclass : EClass = srcMavoElement.eClass()]
		[let tgtEclass : EClass = tgtMavoElement.eClass()]
(assert (forall ((c [mavoElement.eClass().getMAVOClassName()/])) (=>
	(edge [mavoElement.formulaVariable/] c)
	(and
		(= (srcType c) [srcEclass.getMAVOClassName().toUpperCase()/])
		(= (tgtType c) [tgtEclass.getMAVOClassName().toUpperCase()/])
		(node [srcMavoElement.formulaVariable/] ((as src ([srcEclass.getMAVOClassName()/])) c))
		(node [tgtMavoElement.formulaVariable/] ((as tgt ([tgtEclass.getMAVOClassName()/])) c))
	)
)))
		[/let]
		[/let]
		[/let]
		[/let]
	[/for]
[/template]

[template public encodeMAVOConstraints(mavoModel : MAVOModel)]
;Model is Complete
	[for (eclass : EClass | mavoModel.getMetamodelMAVOClasses())]
		[let eclassMavoElements : Sequence(MAVOElement) = mavoModel.getObjectsOfType(eclass)->asMAVOElements()]
		[if (eclassMavoElements->size() > 0)]
(assert	(forall ((c [eclass.getMAVOClassName()/])) (or
			[for (mavoElement : MAVOElement | eclassMavoElements)]
				[let function : String = eclass.getGraphFunction()]
	([function/] [mavoElement.formulaVariable/] c)
				[/let]
			[/for]
)))
		[/if]
		[/let]
	[/for]
	[for (mavoElement : MAVOElement | mavoModel.getMAVOElements())]
		[let function : String = mavoElement.eClass().getGraphFunction()]
		[let sort : String = mavoElement.eClass().getMAVOClassName()]
		[if (not mavoElement.may)]
;[mavoElement.formulaVariable/] Exists
(assert (exists ((c [sort/])) ([function/] [mavoElement.formulaVariable/] c)))
		[/if]
		[if (not mavoElement.set)]
;[mavoElement.formulaVariable/] is Unique
(assert	(forall ((c1 [sort/]) (c2 [sort/])) (=>
	(and ([function/] [mavoElement.formulaVariable/] c1) ([function/] [mavoElement.formulaVariable/] c2))
	(= c1 c2)
)))
		[/if]
		[let unmergeableIds : Sequence(String) = mavoModel.getUnmergeableIds(mavoElement)]
		[if (not unmergeableIds->isEmpty())]
;[mavoElement.formulaVariable/] is Distinct
(assert	(forall ((c [sort/])) (=>
	([function/] [mavoElement.formulaVariable/] c)
	(not (or
			[for (unmergeableId : String | unmergeableIds)]
		([function/] [unmergeableId/] c)
			[/for]
	))
)))
		[/if]
		[/let]
		[/let]
		[/let]
	[/for]
[/template]
