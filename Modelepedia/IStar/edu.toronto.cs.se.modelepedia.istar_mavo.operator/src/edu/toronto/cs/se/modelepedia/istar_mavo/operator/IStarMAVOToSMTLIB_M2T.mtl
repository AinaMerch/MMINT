[comment encoding = UTF-8 /]
[module IStarMAVOToSMTLIB_M2T('http://se.cs.toronto.edu/mmtf/MAVO', 'http://se.cs.toronto.edu/modelepedia/IStar_MAVO')]

[query private getAllIntentions(istar : IStar) : Collection(Intention) =
	istar.actors->collect(intentions)->addAll(istar.dependums)
/]

[query private getAllIntentions(istar : IStar, intentionClass : String) : Collection(Intention) =
	istar.actors->collect(intentions)->addAll(istar.dependums)->select(eClass().name = intentionClass)
/]

[query private getActorIntentions(actor : Actor, intentionClass : String) : Collection(Intention) =
	actor.intentions->select(eClass().name = intentionClass)
/]

[query private getDependumIntentions(istar : IStar, intentionClass : String) : Collection(Intention) =
	istar.dependums->select(eClass().name = intentionClass)
/]

[query private getAllIntentionLinks(istar : IStar) : Collection(IntentionLink) =
	istar.actors->collect(intentions)->collect(linksAsSrc)
/]

[query private getAllIntentionLinks(istar : IStar, intentionLinkClass : String) : Collection(IntentionLink) =
	istar.actors->collect(intentions)->collect(linksAsSrc)->select(eClass().name = intentionLinkClass)
/]

[query private getActorIntentionLinks(actor : Actor, intentionLinkClass : String) : Collection(IntentionLink) =
	actor.intentions->collect(linksAsSrc)->select(eClass().name = intentionLinkClass)
/]

[query private getAllDependerLinks(istar : IStar) : Collection(DependerLink) =
	istar.dependums->collect(dependerLinks)
/]

[query private getAllDependeeLinks(istar : IStar) : Collection(DependeeLink) =
	istar.dependums->collect(dependeeLinks)
/]

[query private nodeName(node : DependencyEndpoint) : String =
	node.name.replaceAll(' ', '')
/]

[query private edgeName(intention : Intention) : String =
	nodeName(intention.eContainer().oclAsType(Actor)) + '2' + nodeName(intention)
/]

[query private edgeName(intentionLink : IntentionLink) : String =
	nodeName(intentionLink.src) + '2' + nodeName(intentionLink.tgt)
/]

[query private edgeName(dependerLink : DependerLink) : String =
	nodeName(dependerLink.depender) + '2' + nodeName(dependerLink.dependum)
/]

[query private edgeName(dependeeLink : DependeeLink) : String =
	nodeName(dependeeLink.dependum) + '2' + nodeName(dependeeLink.dependee)
/]

[template private encodeIntentionDatatype(istar : IStar, intentionClass : String)]
(declare-datatypes () (([intentionClass/]
[for (intention : Intention | getAllIntentions(istar, intentionClass))]
	[nodeName(intention)/]
[/for]
)))
[/template]

[template private encodeIntentionLinkDatatype(istar : IStar, intentionLinkClass : String)]
(declare-datatypes () (([intentionLinkClass/]
[for (intentionLink : IntentionLink | getAllIntentionLinks(istar, intentionLinkClass))]
	[edgeName(intentionLink)/]
[/for]
)))
[/template]

[template private encodeInitialAnalysis(intention : Intention)]
;[nodeName(intention)/] initial analysis tag
(assert (forall ((c [intention.eClass().name/]Concretization)) (=>
	(node [nodeName(intention)/] c)
[if (intention.fullySatisfied or intention.partiallySatisfied or intention.unknown or intention.conflict or intention.partiallyDenied or intention.fullyDenied or intention.noLabel)]
	(and
		(= (fs c) [if (intention.fullySatisfied)]true[else]false[/if])
		(= (ps c) [if (intention.partiallySatisfied)]true[else]false[/if])
		(= (un c) [if (intention.unknown)]true[else]false[/if])
		(= (co c) [if (intention.conflict)]true[else]false[/if])
		(= (pd c) [if (intention.partiallyDenied)]true[else]false[/if])
		(= (fd c) [if (intention.fullyDenied)]true[else]false[/if])
		(= (n c) [if (intention.noLabel)]true[else]false[/if])
		(= (inited c) true)
	)
[else]
	(= (inited c) false)
[/if]
)))
[/template]

[template private encodeOWIntentionConstraint(istar : IStar, intentionClass : String)]
;[intentionClass/]s are Complete
(assert (forall ((c [intentionClass/]Concretization)) (or
[for (intention : Intention | getAllIntentions(istar, intentionClass))]
	(node [nodeName(intention)/] c)
[/for]
)))
[/template]

[template private encodeOWIntentionLinkConstraint(istar : IStar, intentionLinkClass : String)]
;[intentionLinkClass/]s are Complete
(assert (forall ((c [intentionLinkClass/]Concretization)) (or
[for (intentionLink : IntentionLink | getAllIntentionLinks(istar, intentionLinkClass))]
	(edge [edgeName(intentionLink)/] c)
[/for]
)))
[/template]

[template private encodeMConstraint(sort : String, fun : String, name : String)]
;[name/] Exists
(assert	(exists ((c [sort/]Concretization)) ([fun/] [name/] c)))
[/template]

[template private encodeMIntentionConstraint(intention : Intention)]
[encodeMConstraint(intention.eClass().name, 'node', nodeName(intention))/]
[/template]

[template private encodeMIntentionLinkConstraint(intentionLink : IntentionLink)]
[encodeMConstraint(intentionLink.eClass().name, 'edge', edgeName(intentionLink))/]
[/template]

[template private encodeMDependerLinkConstraint(dependerLink : DependerLink)]
[encodeMConstraint('DependerLink', 'edge', edgeName(dependerLink))/]
[/template]

[template private encodeMDependeeLinkConstraint(dependeeLink : DependeeLink)]
[encodeMConstraint('DependeeLink', 'edge', edgeName(dependeeLink))/]
[/template]

[template private encodeSConstraint(sort : String, fun : String, name : String)]
;[name/] is Unique
(assert	(forall ((c1 [sort/]Concretization) (c2 [sort/]Concretization)) (=>
	(and ([fun/] [name/] c1) ([fun/] [name/] c2))
	(= c1 c2)
)))
[/template]

[template private encodeSIntentionConstraint(intention : Intention)]
[encodeSConstraint(intention.eClass().name, 'node', nodeName(intention))/]
[/template]

[template private encodeSIntentionLinkConstraint(intentionLink : IntentionLink)]
[encodeSConstraint(intentionLink.eClass().name, 'edge', edgeName(intentionLink))/]
[/template]

[template private encodeSDependerLinkConstraint(dependerLink : DependerLink)]
[encodeSConstraint('DependerLink', 'edge', edgeName(dependerLink))/]
[/template]

[template private encodeSDependeeLinkConstraint(dependeeLink : DependeeLink)]
[encodeSConstraint('DependeeLink', 'edge', edgeName(dependeeLink))/]
[/template]

[template private encodeVConstraint(sort : String, fun : String, name1 : String, name2 : String)]
;[name1/] is Distinct from [name2/]
(assert	(forall ((c [sort/]Concretization)) (=>
	([fun/] [name1/] c)
	(not ([fun/] [name2/] c))
)))
[/template]

[template private encodeVIntentionConstraint(intention1 : Intention, intention2 : Intention)]
[encodeVConstraint(intention1.eClass().name, 'node', nodeName(intention1), nodeName(intention2))/]
[/template]

[template private encodeVIntentionLinkConstraint(intentionLink1 : IntentionLink, intentionLink2 : IntentionLink)]
[encodeVConstraint(intentionLink1.eClass().name, 'edge', edgeName(intentionLink1), edgeName(intentionLink2))/]
[/template]

[template private encodeVDependerLinkConstraint(dependerLink1 : DependerLink, dependerLink2 : DependerLink)]
[encodeVConstraint('DependerLink', 'edge', edgeName(dependerLink1), edgeName(dependerLink2))/]
[/template]

[template private encodeVDependeeLinkConstraint(dependeeLink1 : DependeeLink, dependeeLink2 : DependeeLink)]
[encodeVConstraint('DependeeLink', 'edge', edgeName(dependeeLink1), edgeName(dependeeLink2))/]
[/template]

[template private encodeMAVIntentionConstraints(istar : IStar, intention : Intention)]
[let intentionClass : String = intention.eClass().name]
[if (not intention.may)]
[encodeMIntentionConstraint(intention)/]
[/if]
[if (not intention.set)]
[encodeSIntentionConstraint(intention)/]
[/if]
[if (intention.eContainer().oclIsTypeOf(IStar))]
	[for (actor2 : Actor | istar.actors)]
		[for (intention2 : Intention | getActorIntentions(actor2, intentionClass))]
[encodeVIntentionConstraint(intention, intention2)/]
		[/for]
	[/for]
	[if (not intention.var)]
		[for (intention2 : Intention | getDependumIntentions(istar, intentionClass))]
			[if (not intention2.var and not (intention.name = intention2.name))]
[encodeVIntentionConstraint(intention, intention2)/]
			[/if]
		[/for]
	[/if]
[else]
	[for (intention2 : Intention | getDependumIntentions(istar, intentionClass))]
[encodeVIntentionConstraint(intention, intention2)/]
	[/for]
	[let actor : Actor = intention.eContainer(Actor)]
	[for (actor2 : Actor | istar.actors)]
		[if (not (actor.name = actor2.name))]
			[for (intention2 : Intention | getActorIntentions(actor2, intentionClass))]
				[if ((not actor.var and not actor2.var) or (not intention.var and not intention2.var))]
[encodeVIntentionConstraint(intention, intention2)/]
				[/if]
			[/for]
		[/if]
	[/for]
	[/let]
	[if (not intention.var)]
		[for (intention2 : Intention | getActorIntentions(intention.eContainer(Actor), intentionClass))]
			[if (not intention2.var and not (intention.name = intention2.name))]
[encodeVIntentionConstraint(intention, intention2)/]
			[/if]
		[/for]
	[/if]
[/if]
[/let]
[/template]

[template private encodeMAVIntentionLinkConstraint(istar : IStar, intentionLink : IntentionLink)]
[let intentionLinkClass : String = intentionLink.eClass().name]
[if (not intentionLink.may)]
[encodeMIntentionLinkConstraint(intentionLink)/]
[/if]
[if (not intentionLink.set)]
[encodeSIntentionLinkConstraint(intentionLink)/]
[/if]
[let actor : Actor = intentionLink.eContainer(Actor)]
[for (actor2 : Actor | istar.actors)]
	[if (not (actor.name = actor2.name))]
		[for (intentionLink2 : IntentionLink | getActorIntentionLinks(actor2, intentionLinkClass))]
			[if ((not actor.var and not actor2.var) or (not intentionLink.var and not intentionLink2.var))]
[encodeVIntentionLinkConstraint(intentionLink, intentionLink2)/]
			[/if]
		[/for]
	[/if]
[/for]
[/let]
[if (not intentionLink.var)]
	[for (intentionLink2 : IntentionLink | getActorIntentionLinks(intentionLink.eContainer(Actor), intentionLinkClass))]
		[if (not intentionLink2.var and not (intentionLink.name = intentionLink2.name))]
[encodeVIntentionLinkConstraint(intentionLink, intentionLink2)/]
		[/if]
	[/for]
[/if]
[/let]
[/template]

[template private encodeModelConstant(sort : String, fun : String, name : String, funConst : String, const : String)]
;[name/] [funConst/] constant
(assert (forall ((c [sort/]Concretization)) (=>
	([fun/] [name/] c)
	(= ([funConst/] c) [const/])
)))
[/template]

[template private encodeIntentionLinkConstant(intentionLink : IntentionLink, funConst : String, const : String)]
[encodeModelConstant(intentionLink.eClass().name, 'edge', edgeName(intentionLink), funConst, const)/]
[/template]

[template private encodeEdgeConstraint(sort : String, name : String, classSrc : String, nameSrc : String, classTgt : String, nameTgt : String)]
;[name/] endpoints
(assert (forall ((c [sort/]Concretization)) (=>
	(edge [name/] c)
	(and
		(node [nameSrc/] ([if (classSrc = '')]src[else](as src ([classSrc/]Concretization))[/if] c))
		(node [nameTgt/] ([if (classTgt = '')]tgt[else](as tgt ([classTgt/]Concretization))[/if] c))
	)
)))
[/template]

[template private encodeIntentionLinkConstraint(intentionLink : IntentionLink, multipleClassSrc : Boolean, multipleClassTgt : Boolean)]
	[let classSrc : String = if multipleClassSrc then intentionLink.src.eClass().name else '' endif]
	[let classTgt : String = if multipleClassTgt then intentionLink.tgt.eClass().name else '' endif]
[encodeEdgeConstraint(intentionLink.eClass().name, edgeName(intentionLink), classSrc, nodeName(intentionLink.src), classTgt, nodeName(intentionLink.tgt))/]
	[if (multipleClassSrc)]
[encodeIntentionLinkConstant(intentionLink, 'srcEndpoint', 'ENDPOINT_'+classSrc.toUpper())/]
	[/if]
	[if (multipleClassTgt)]
[encodeIntentionLinkConstant(intentionLink, 'tgtEndpoint', 'ENDPOINT_'+classTgt.toUpper())/]
	[/if]
	[/let]
	[/let]
[/template]

[template private encodeConstants(istar : IStar)]
;Endpoint Types
(declare-const ENDPOINT_TASK Int)
(declare-const ENDPOINT_GOAL Int)
(declare-const ENDPOINT_SOFTGOAL Int)
(declare-const ENDPOINT_RESOURCE Int)
(assert (= ENDPOINT_TASK 1))
(assert (= ENDPOINT_GOAL 2))
(assert (= ENDPOINT_SOFTGOAL 3))
(assert (= ENDPOINT_RESOURCE 4))

;Contribution Types
(declare-const CONTRIBUTION_MAKE Int)
(declare-const CONTRIBUTION_HELP Int)
(declare-const CONTRIBUTION_SOMEPLUS Int)
(declare-const CONTRIBUTION_BREAK Int)
(declare-const CONTRIBUTION_HURT Int)
(declare-const CONTRIBUTION_SOMEMINUS Int)
(declare-const CONTRIBUTION_UNKNOWN Int)
(assert (= CONTRIBUTION_MAKE 11))
(assert (= CONTRIBUTION_HELP 12))
(assert (= CONTRIBUTION_SOMEPLUS 13))
(assert (= CONTRIBUTION_BREAK 14))
(assert (= CONTRIBUTION_HURT 15))
(assert (= CONTRIBUTION_SOMEMINUS 16))
(assert (= CONTRIBUTION_UNKNOWN 17))
[/template]

[template private encodeModel(istar : IStar)]

;Model
(declare-datatypes () ((Actor
[for (actor : Actor | istar.actors)]
	[nodeName(actor)/]
[/for]
)))
[encodeIntentionDatatype(istar, 'Task')/]
[encodeIntentionDatatype(istar, 'Goal')/]
[encodeIntentionDatatype(istar, 'SoftGoal')/]
[encodeIntentionDatatype(istar, 'Resource')/]
(declare-datatypes () ((Intention
[for (actor : Actor | istar.actors)]
	[for (intention : Intention | actor.intentions)]
	[edgeName(intention)/]
	[/for]
[/for]
)))
[encodeIntentionLinkDatatype(istar, 'MeansEnd')/]
[encodeIntentionLinkDatatype(istar, 'Decomposition')/]
[encodeIntentionLinkDatatype(istar, 'Contribution')/]
(declare-datatypes () ((DependerLink
[for (dependerLink : DependerLink | getAllDependerLinks(istar)->select(not depender.oclIsTypeOf(Actor)))]
	[edgeName(dependerLink)/]
[/for]
)))
(declare-datatypes () ((DependeeLink
[for (dependeeLink : DependeeLink | getAllDependeeLinks(istar)->select(not dependee.oclIsTypeOf(Actor)))]
	[edgeName(dependeeLink)/]
[/for]
)))

;Concretizations
(declare-sort ActorConcretization)
(declare-sort TaskConcretization)
(declare-sort GoalConcretization)
(declare-sort SoftGoalConcretization)
(declare-sort ResourceConcretization)
(declare-sort IntentionConcretization)
(declare-sort MeansEndConcretization)
(declare-sort DecompositionConcretization)
(declare-sort ContributionConcretization)
(declare-sort DependerLinkConcretization)
(declare-sort DependeeLinkConcretization)
(declare-fun node (Actor ActorConcretization) Bool)
(declare-fun node (Task TaskConcretization) Bool)
(declare-fun node (Goal GoalConcretization) Bool)
(declare-fun node (SoftGoal SoftGoalConcretization) Bool)
(declare-fun node (Resource ResourceConcretization) Bool)
(declare-fun edge (Intention IntentionConcretization) Bool)
(declare-fun tgtEndpoint (IntentionConcretization) Int)
(declare-fun src (IntentionConcretization) ActorConcretization)
(declare-fun tgt (IntentionConcretization) TaskConcretization)
(declare-fun tgt (IntentionConcretization) GoalConcretization)
(declare-fun tgt (IntentionConcretization) SoftGoalConcretization)
(declare-fun tgt (IntentionConcretization) ResourceConcretization)
(declare-fun edge (MeansEnd MeansEndConcretization) Bool)
(declare-fun src (MeansEndConcretization) TaskConcretization)
(declare-fun tgt (MeansEndConcretization) GoalConcretization)
(declare-fun edge (Decomposition DecompositionConcretization) Bool)
(declare-fun srcEndpoint (DecompositionConcretization) Int)
(declare-fun src (DecompositionConcretization) TaskConcretization)
(declare-fun src (DecompositionConcretization) GoalConcretization)
(declare-fun src (DecompositionConcretization) SoftGoalConcretization)
(declare-fun src (DecompositionConcretization) ResourceConcretization)
(declare-fun tgt (DecompositionConcretization) TaskConcretization)
(declare-fun edge (Contribution ContributionConcretization) Bool)
(declare-fun srcEndpoint (ContributionConcretization) Int)
(declare-fun type (ContributionConcretization) Int)
(declare-fun src (ContributionConcretization) TaskConcretization)
(declare-fun src (ContributionConcretization) GoalConcretization)
(declare-fun src (ContributionConcretization) SoftGoalConcretization)
(declare-fun src (ContributionConcretization) ResourceConcretization)
(declare-fun tgt (ContributionConcretization) SoftGoalConcretization)
(declare-fun edge (DependerLink DependerLinkConcretization) Bool)
(declare-fun srcEndpoint (DependerLinkConcretization) Int)
(declare-fun tgtEndpoint (DependerLinkConcretization) Int)
(declare-fun src (DependerLinkConcretization) TaskConcretization)
(declare-fun src (DependerLinkConcretization) GoalConcretization)
(declare-fun src (DependerLinkConcretization) SoftGoalConcretization)
(declare-fun src (DependerLinkConcretization) ResourceConcretization)
(declare-fun tgt (DependerLinkConcretization) TaskConcretization)
(declare-fun tgt (DependerLinkConcretization) GoalConcretization)
(declare-fun tgt (DependerLinkConcretization) SoftGoalConcretization)
(declare-fun tgt (DependerLinkConcretization) ResourceConcretization)
(declare-fun edge (DependeeLink DependeeLinkConcretization) Bool)
(declare-fun srcEndpoint (DependeeLinkConcretization) Int)
(declare-fun tgtEndpoint (DependeeLinkConcretization) Int)
(declare-fun src (DependeeLinkConcretization) TaskConcretization)
(declare-fun src (DependeeLinkConcretization) GoalConcretization)
(declare-fun src (DependeeLinkConcretization) SoftGoalConcretization)
(declare-fun src (DependeeLinkConcretization) ResourceConcretization)
(declare-fun tgt (DependeeLinkConcretization) TaskConcretization)
(declare-fun tgt (DependeeLinkConcretization) GoalConcretization)
(declare-fun tgt (DependeeLinkConcretization) SoftGoalConcretization)
(declare-fun tgt (DependeeLinkConcretization) ResourceConcretization)
[/template]

[template private encodeAnalysis(istar : IStar)]

;Analysis labels
(declare-fun inited (TaskConcretization) Bool)
(declare-fun inited (GoalConcretization) Bool)
(declare-fun inited (SoftGoalConcretization) Bool)
(declare-fun inited (ResourceConcretization) Bool)
(declare-fun fsSrcEndpoint (ContributionConcretization) Bool)
(declare-fun psSrcEndpoint (ContributionConcretization) Bool)
(declare-fun unSrcEndpoint (ContributionConcretization) Bool)
(declare-fun coSrcEndpoint (ContributionConcretization) Bool)
(declare-fun pdSrcEndpoint (ContributionConcretization) Bool)
(declare-fun fdSrcEndpoint (ContributionConcretization) Bool)
(declare-fun fs (TaskConcretization) Bool)
(declare-fun fs (GoalConcretization) Bool)
(declare-fun fs (SoftGoalConcretization) Bool)
(declare-fun fs (ResourceConcretization) Bool)
(declare-fun fs (MeansEndConcretization) Bool)
(declare-fun fs (DecompositionConcretization) Bool)
(declare-fun fs (ContributionConcretization) Bool)
(declare-fun fs (DependerLinkConcretization) Bool)
(declare-fun fs (DependeeLinkConcretization) Bool)
(declare-fun ps (TaskConcretization) Bool)
(declare-fun ps (GoalConcretization) Bool)
(declare-fun ps (SoftGoalConcretization) Bool)
(declare-fun ps (ResourceConcretization) Bool)
(declare-fun ps (MeansEndConcretization) Bool)
(declare-fun ps (DecompositionConcretization) Bool)
(declare-fun ps (ContributionConcretization) Bool)
(declare-fun ps (DependerLinkConcretization) Bool)
(declare-fun ps (DependeeLinkConcretization) Bool)
(declare-fun un (TaskConcretization) Bool)
(declare-fun un (GoalConcretization) Bool)
(declare-fun un (SoftGoalConcretization) Bool)
(declare-fun un (ResourceConcretization) Bool)
(declare-fun un (MeansEndConcretization) Bool)
(declare-fun un (DecompositionConcretization) Bool)
(declare-fun un (ContributionConcretization) Bool)
(declare-fun un (DependerLinkConcretization) Bool)
(declare-fun un (DependeeLinkConcretization) Bool)
(declare-fun co (TaskConcretization) Bool)
(declare-fun co (GoalConcretization) Bool)
(declare-fun co (SoftGoalConcretization) Bool)
(declare-fun co (ResourceConcretization) Bool)
(declare-fun co (MeansEndConcretization) Bool)
(declare-fun co (DecompositionConcretization) Bool)
(declare-fun co (ContributionConcretization) Bool)
(declare-fun co (DependerLinkConcretization) Bool)
(declare-fun co (DependeeLinkConcretization) Bool)
(declare-fun pd (TaskConcretization) Bool)
(declare-fun pd (GoalConcretization) Bool)
(declare-fun pd (SoftGoalConcretization) Bool)
(declare-fun pd (ResourceConcretization) Bool)
(declare-fun pd (MeansEndConcretization) Bool)
(declare-fun pd (DecompositionConcretization) Bool)
(declare-fun pd (ContributionConcretization) Bool)
(declare-fun pd (DependerLinkConcretization) Bool)
(declare-fun pd (DependeeLinkConcretization) Bool)
(declare-fun fd (TaskConcretization) Bool)
(declare-fun fd (GoalConcretization) Bool)
(declare-fun fd (SoftGoalConcretization) Bool)
(declare-fun fd (ResourceConcretization) Bool)
(declare-fun fd (MeansEndConcretization) Bool)
(declare-fun fd (DecompositionConcretization) Bool)
(declare-fun fd (ContributionConcretization) Bool)
(declare-fun fd (DependerLinkConcretization) Bool)
(declare-fun fd (DependeeLinkConcretization) Bool)
(assert (forall ((c MeansEndConcretization)) (= (fs c) (fs (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (ps c) (ps (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (un c) (un (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (co c) (co (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (pd c) (pd (src c)))))
(assert (forall ((c MeansEndConcretization)) (= (fd c) (fd (src c)))))
(assert (forall ((c DecompositionConcretization)) (= (fs c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(fs ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(fs ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as src (SoftGoalConcretization)) c))
				(fs ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (ps c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(ps ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(ps ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as src (SoftGoalConcretization)) c))
				(ps ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (un c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(un ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(un ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as src (SoftGoalConcretization)) c))
				(un ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (co c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(co ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(co ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as src (SoftGoalConcretization)) c))
				(co ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((dc DecompositionConcretization)) (= (pd dc)
	(ite (= (srcEndpoint dc) ENDPOINT_TASK)
		(pd ((as src (TaskConcretization)) dc))
		(ite (= (srcEndpoint dc) ENDPOINT_GOAL)
			(pd ((as src (GoalConcretization)) dc))
			(ite (= (srcEndpoint dc) ENDPOINT_SOFTGOAL)
				(pd ((as src (SoftGoalConcretization)) dc))
				(pd ((as src (ResourceConcretization)) dc))
			)
		)
	)
)))
(assert (forall ((c DecompositionConcretization)) (= (fd c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(fd ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(fd ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as src (SoftGoalConcretization)) c))
				(fd ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fsSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(fs ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(fs ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as src (SoftGoalConcretization)) c))
				(fs ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (psSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(ps ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(ps ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as src (SoftGoalConcretization)) c))
				(ps ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (unSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(un ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(un ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as src (SoftGoalConcretization)) c))
				(un ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (coSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(co ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(co ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as src (SoftGoalConcretization)) c))
				(co ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (pdSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(pd ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(pd ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(pd ((as src (SoftGoalConcretization)) c))
				(pd ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fdSrcEndpoint c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(fd ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(fd ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as src (SoftGoalConcretization)) c))
				(fd ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fs c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (fsSrcEndpoint c)
			true
			false
		)
		false
	)
)))
(assert (forall ((c ContributionConcretization)) (= (ps c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (psSrcEndpoint c)
			true
			false
		)
		(ite (or (= (type c) CONTRIBUTION_HELP) (= (type c) CONTRIBUTION_SOMEPLUS))
			(ite (or (fsSrcEndpoint c) (psSrcEndpoint c))
				true
				false
			)
			(ite (or (= (type c) CONTRIBUTION_BREAK) (= (type c) CONTRIBUTION_HURT) (= (type c) CONTRIBUTION_SOMEMINUS))
				(ite (or (pdSrcEndpoint c) (fdSrcEndpoint c))
					true
					false
				)
				false
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (un c)
	(ite (= (type c) CONTRIBUTION_UNKNOWN)
		true
		(ite (unSrcEndpoint c)
			true
			false
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (co c)
	(ite (= (type c) CONTRIBUTION_UNKNOWN)
		false
		(ite (coSrcEndpoint c)
			true
			false
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (pd c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (pdSrcEndpoint c)
			true
			false
		)
		(ite (or (= (type c) CONTRIBUTION_HELP) (= (type c) CONTRIBUTION_SOMEPLUS))
			(ite (or (pdSrcEndpoint c) (fdSrcEndpoint c))
				true
				false
			)
			(ite (= (type c) CONTRIBUTION_BREAK)
				(ite (psSrcEndpoint c)
					true
					false
				)
				(ite (or (= (type c) CONTRIBUTION_HURT) (= (type c) CONTRIBUTION_SOMEMINUS))
					(ite (or (fsSrcEndpoint c) (psSrcEndpoint c))
						true
						false
					)
					false
				)
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (fd c)
	(ite (= (type c) CONTRIBUTION_MAKE)
		(ite (fdSrcEndpoint c)
			true
			false
		)
		(ite (= (type c) CONTRIBUTION_BREAK)
			(ite (fsSrcEndpoint c)
				true
				false
			)
			false
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (fs c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fs ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fs ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as tgt (SoftGoalConcretization)) c))
				(fs ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (ps c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(ps ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(ps ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as tgt (SoftGoalConcretization)) c))
				(ps ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (un c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(un ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(un ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as tgt (SoftGoalConcretization)) c))
				(un ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (co c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(co ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(co ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as tgt (SoftGoalConcretization)) c))
				(co ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (pd c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(pd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(pd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(pd ((as tgt (SoftGoalConcretization)) c))
				(pd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (fd c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as tgt (SoftGoalConcretization)) c))
				(fd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (fs c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fs ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fs ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fs ((as tgt (SoftGoalConcretization)) c))
				(fs ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (ps c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(ps ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(ps ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(ps ((as tgt (SoftGoalConcretization)) c))
				(ps ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (un c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(un ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(un ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(un ((as tgt (SoftGoalConcretization)) c))
				(un ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (co c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(co ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(co ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(co ((as tgt (SoftGoalConcretization)) c))
				(co ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (pd c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(pd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(pd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(pd ((as tgt (SoftGoalConcretization)) c))
				(pd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (fd c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(fd ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(fd ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(fd ((as tgt (SoftGoalConcretization)) c))
				(fd ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))

;Uninitialized labels
(declare-fun n (TaskConcretization) Bool)
(declare-fun n (GoalConcretization) Bool)
(declare-fun n (SoftGoalConcretization) Bool)
(declare-fun n (ResourceConcretization) Bool)
(declare-fun n (MeansEndConcretization) Bool)
(declare-fun n (DecompositionConcretization) Bool)
(declare-fun n (ContributionConcretization) Bool)
(declare-fun n (DependerLinkConcretization) Bool)
(declare-fun n (DependeeLinkConcretization) Bool)
(assert (forall ((c MeansEndConcretization)) (= (n c) (n (src c)))))
(assert (forall ((c DecompositionConcretization)) (= (n c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(n ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(n ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(n ((as src (SoftGoalConcretization)) c))
				(n ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c ContributionConcretization)) (= (n c)
	(ite (= (srcEndpoint c) ENDPOINT_TASK)
		(n ((as src (TaskConcretization)) c))
		(ite (= (srcEndpoint c) ENDPOINT_GOAL)
			(n ((as src (GoalConcretization)) c))
			(ite (= (srcEndpoint c) ENDPOINT_SOFTGOAL)
				(n ((as src (SoftGoalConcretization)) c))
				(n ((as src (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependerLinkConcretization)) (= (n c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(n ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(n ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(n ((as tgt (SoftGoalConcretization)) c))
				(n ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))
(assert (forall ((c DependeeLinkConcretization)) (= (n c)
	(ite (= (tgtEndpoint c) ENDPOINT_TASK)
		(n ((as tgt (TaskConcretization)) c))
		(ite (= (tgtEndpoint c) ENDPOINT_GOAL)
			(n ((as tgt (GoalConcretization)) c))
			(ite (= (tgtEndpoint c) ENDPOINT_SOFTGOAL)
				(n ((as tgt (SoftGoalConcretization)) c))
				(n ((as tgt (ResourceConcretization)) c))
			)
		)
	)
)))

;Only one analysis label
(assert (forall ((c TaskConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c) (n c))))
(assert (forall ((c GoalConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c) (n c))))
(assert (forall ((c SoftGoalConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c) (n c))))
(assert (forall ((c ResourceConcretization)) (xor (fs c) (ps c) (un c) (co c) (pd c) (fd c) (n c))))
[/template]

[template private encodeConstraints(istar : IStar)]

;No self-loops:
;;MeansEnd can't
;;Decomposition only from Task to Task
;;Contribution only from SoftGoal to SoftGoal
;;Depender and Dependee only if there are dependencies among dependums
(assert (forall ((c DecompositionConcretization)) (=>
	(= (srcEndpoint c) ENDPOINT_TASK)
	(not (= ((as src (TaskConcretization)) c) (tgt c)))
)))
(assert (forall ((c ContributionConcretization)) (=>
	(= (srcEndpoint c) ENDPOINT_SOFTGOAL)
	(not (= ((as src (SoftGoalConcretization)) c) (tgt c)))
)))

;Complete Model
(assert	(forall ((c ActorConcretization)) (or
[for (actor : Actor | istar.actors)]
	(node [nodeName(actor)/] c)
[/for]
)))
[encodeOWIntentionConstraint(istar, 'Task')/]
[encodeOWIntentionConstraint(istar, 'Goal')/]
[encodeOWIntentionConstraint(istar, 'SoftGoal')/]
[encodeOWIntentionConstraint(istar, 'Resource')/]
(assert (forall ((c IntentionConcretization)) (or
[for (actor : Actor | istar.actors)]
	[for (intention : Intention | actor.intentions)]
	(edge [edgeName(intention)/] c)
	[/for]
[/for]
)))
[encodeOWIntentionLinkConstraint(istar, 'MeansEnd')/]
[encodeOWIntentionLinkConstraint(istar, 'Decomposition')/]
[encodeOWIntentionLinkConstraint(istar, 'Contribution')/]
(assert (forall ((c DependerLinkConcretization)) (or
[for (dependerLink : DependerLink | getAllDependerLinks(istar)->select(not depender.oclIsTypeOf(Actor)))]
	(edge [edgeName(dependerLink)/] c)
[/for]
)))
(assert (forall ((c DependeeLinkConcretization)) (or
[for (dependeeLink : DependeeLink | getAllDependeeLinks(istar)->select(not dependee.oclIsTypeOf(Actor)))]
	(edge [edgeName(dependeeLink)/] c)
[/for]
)))

;Model Elements
[for (actor : Actor | istar.actors)]
	[if (not actor.may)]
[encodeMConstraint('Actor', 'node', nodeName(actor))/]
	[/if]
	[if (not actor.set)]
[encodeSConstraint('Actor', 'node', nodeName(actor))/]
	[/if]
	[if (not actor.var)]
		[for (actor2 : Actor | istar.actors)]
			[if (not actor2.var and not (actor.name = actor2.name))]
[encodeVConstraint('Actor', 'node', nodeName(actor), nodeName(actor2))/]
			[/if]
		[/for]
	[/if]
[/for]
[for (intention : Intention | getAllIntentions(istar))]
[encodeInitialAnalysis(intention)/]
[encodeMAVIntentionConstraints(istar, intention)/]
[/for]
[for (actor : Actor | istar.actors)]
	[for (intention : Intention | actor.intentions)]
		[let tgtClass : String = intention.eClass().name]
[encodeModelConstant('Intention', 'edge', edgeName(intention), 'tgtEndpoint', 'ENDPOINT_'+tgtClass.toUpper())/]
[encodeEdgeConstraint('Intention', edgeName(intention), '', nodeName(intention.eContainer(Actor)), tgtClass, nodeName(intention))/]
		[if (not intention.may)]
[encodeMConstraint('Intention', 'edge', edgeName(intention))/]
		[/if]
		[if (not intention.set)]
[encodeSConstraint('Intention', 'edge', edgeName(intention))/]
		[/if]
		[for (actor2 : Actor | istar.actors)]
			[if (not (actor.name = actor2.name))]
				[for (intention2 : Intention | actor2.intentions->select(eClass().name = tgtClass))]
					[if ((not actor.var and not actor2.var) or (not intention.var and not intention2.var))]
[encodeVConstraint('Intention', 'edge', edgeName(intention), edgeName(intention2))/]
					[/if]
				[/for]
			[/if]
		[/for]
		[if (not intention.var)]
			[for (intention2 : Intention | actor.intentions->select(eClass().name = tgtClass))]
				[if (not intention2.var and not (edgeName(intention) = edgeName(intention2)))]
[encodeVConstraint('Intention', 'edge', edgeName(intention), edgeName(intention2))/]
				[/if]
			[/for]
		[/if]
		[/let]
	[/for]
[/for]
[for (intentionLink : IntentionLink | getAllIntentionLinks(istar))]
[encodeMAVIntentionLinkConstraint(istar, intentionLink)/]
	[if (intentionLink.oclIsTypeOf(MeansEnd))]
[encodeIntentionLinkConstraint(intentionLink, false, false)/]
	[elseif (intentionLink.oclIsTypeOf(Decomposition))]
[encodeIntentionLinkConstraint(intentionLink, true, false)/]
	[elseif (intentionLink.oclIsTypeOf(Contribution))]
[encodeIntentionLinkConstraint(intentionLink, true, false)/]
[encodeIntentionLinkConstant(intentionLink, 'type', 'CONTRIBUTION_'+intentionLink.oclAsType(Contribution).type)/]
	[/if]
[/for]
[for (dependerLink : DependerLink | getAllDependerLinks(istar)->select(not depender.oclIsTypeOf(Actor)))]
	[let srcClass : String = dependerLink.depender.eClass().name]
	[let tgtClass : String = dependerLink.dependum.eClass().name]
[encodeModelConstant('DependerLink', 'edge', edgeName(dependerLink), 'srcEndpoint', 'ENDPOINT_'+srcClass.toUpper())/]
[encodeModelConstant('DependerLink', 'edge', edgeName(dependerLink), 'tgtEndpoint', 'ENDPOINT_'+tgtClass.toUpper())/]
[encodeEdgeConstraint('DependerLink', edgeName(dependerLink), srcClass, nodeName(dependerLink.depender), tgtClass, nodeName(dependerLink.dependum))/]
	[if (not dependerLink.may)]
[encodeMDependerLinkConstraint(dependerLink)/]
	[/if]
	[if (not dependerLink.set)]
[encodeSDependerLinkConstraint(dependerLink)/]
	[/if]
	[if (not dependerLink.var)]
		[for (dependerLink2 : DependerLink | getAllDependerLinks(istar)->select(not depender.oclIsTypeOf(Actor) and depender.eClass().name = srcClass and dependum.eClass().name = tgtClass))]
			[if (not dependerLink2.var and not (edgeName(dependerLink) = edgeName(dependerLink2)))]
[encodeVDependerLinkConstraint(dependerLink, dependerLink2)/]
			[/if]
		[/for]
	[/if]
	[/let]
	[/let]
[/for]
[for (dependeeLink : DependeeLink | getAllDependeeLinks(istar)->select(not dependee.oclIsTypeOf(Actor)))]
	[let srcClass : String = dependeeLink.dependum.eClass().name]
	[let tgtClass : String = dependeeLink.dependee.eClass().name]
[encodeModelConstant('DependeeLink', 'edge', edgeName(dependeeLink), 'srcEndpoint', 'ENDPOINT_'+srcClass.toUpper())/]
[encodeModelConstant('DependeeLink', 'edge', edgeName(dependeeLink), 'tgtEndpoint', 'ENDPOINT_'+tgtClass.toUpper())/]
[encodeEdgeConstraint('DependeeLink', edgeName(dependeeLink), srcClass, nodeName(dependeeLink.dependum), tgtClass, nodeName(dependeeLink.dependee))/]
	[if (not dependeeLink.may)]
[encodeMDependeeLinkConstraint(dependeeLink)/]
	[/if]
	[if (not dependeeLink.set)]
[encodeSDependeeLinkConstraint(dependeeLink)/]
	[/if]
	[if (not dependeeLink.var)]
		[for (dependeeLink2 : DependeeLink | getAllDependeeLinks(istar)->select(not dependee.oclIsTypeOf(Actor) and dependum.eClass().name = srcClass and dependee.eClass().name = tgtClass))]
			[if (not dependeeLink2.var and not (edgeName(dependeeLink) = edgeName(dependeeLink2)))]
[encodeVDependeeLinkConstraint(dependeeLink, dependeeLink2)/]
			[/if]
		[/for]
	[/if]
	[/let]
	[/let]
[/for]
[/template]

[template private encodePropagation(istar : IStar)]

;Goal propagation (MeansEnd + Depender + Dependee)
(assert	(forall ((c GoalConcretization)) (=> (not (inited c)) (= (fs c) (ite
	(or
		(and (exists ((mec MeansEndConcretization)) (and (= (tgt mec) c) (fs mec))) (not (exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (or (fd dc) (pd dc) (co dc) (un dc) (n dc) (ps dc))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (fs dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2) (ps dc2))))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (fs dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2) (ps dc2))))))
	)
	true
	false
)))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (fs c)) (= (ps c) false))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (not (fs c))) (= (ps c) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) c) (ps mec1))) (and (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) c) (fs mec2)))) (not (exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (or (fd dc) (pd dc) (co dc) (un dc) (n dc)))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (ps dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2))))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (ps dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2))))))
	)
	true
	false
)))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (or (fs c) (ps c))) (= (n c) false))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (not (fs c)) (not (ps c))) (= (n c) (ite
	(or
		(and (not (exists ((mec MeansEndConcretization)) (= (tgt mec) c))) (not (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c)))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c)))))
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) c) (n mec1))) (and (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) c) (or (fs mec2) (ps mec2) (un mec2) (co mec2) (pd mec2) (fd mec2))))) (not (exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (or (fd dc) (pd dc) (co dc) (un dc)))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (n dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (n dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))))
	)
	true
	false
)))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (or (fs c) (ps c) (n c))) (= (un c) false))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (not (fs c)) (not (ps c)) (not (n c))) (= (un c) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) c) (un mec1))) (and (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) c) (or (fs mec2) (ps mec2))))) (not (exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (or (fd dc) (pd dc) (co dc)))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (un dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2))))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (un dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2))))))
	)
	true
	false
)))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (or (fs c) (ps c) (n c) (un c))) (= (co c) false))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (not (fs c)) (not (ps c)) (not (n c)) (not (un c))) (= (co c) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) c) (co mec1))) (and (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) c) (or (fs mec2) (ps mec2) (un mec2))))) (not (exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (or (fd dc) (pd dc)))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (co dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2))))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (co dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (or (fd dc2) (pd dc2))))))
	)
	true
	false
)))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (or (fs c) (ps c) (n c) (un c) (co c))) (= (pd c) false))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (not (fs c)) (not (ps c)) (not (n c)) (not (un c)) (not (co c))) (= (pd c) (ite
	(or
		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) c) (pd mec1))) (and (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) c) (or (fs mec2) (ps mec2) (un mec2) (co mec2))))) (not (exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (fd dc))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (pd dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (fd dc2)))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc1) c) (pd dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc2) c) (fd dc2)))))
	)
	true
	false
)))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (or (fs c) (ps c) (n c) (un c) (co c) (pd c))) (= (fd c) false))))
(assert	(forall ((c GoalConcretization)) (=> (and (not (inited c)) (not (fs c)) (not (ps c)) (not (n c)) (not (un c)) (not (co c)) (not (pd c))) (= (fd c) true))))
;(assert	(forall ((c GoalConcretization)) (=> (not (inited c)) (= (fd c) (ite
;	(or
;		(and (exists ((mec1 MeansEndConcretization)) (and (= (tgt mec1) c) (fd mec1))) (not (exists ((mec2 MeansEndConcretization)) (and (= (tgt mec2) c) (or (fs mec2) (ps mec2) (un mec2) (co mec2) (pd mec2))))))
;		(exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (fd dc)))
;		(exists ((dc DependeeLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_GOAL) (= ((as src (GoalConcretization)) dc) c) (fd dc)))
;	)
;	true
;	false
;)))))

;Task propagation (Decomposition + Depender)
(assert (forall ((c TaskConcretization)) (=> (not (inited c)) (= (fd c) (ite
	(or
		(exists ((dc DecompositionConcretization)) (and (= (tgt dc) c) (fd dc)))
		(exists ((dc DependerLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc) c) (fd dc)))
	)
	true
	false
)))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (fd c))  (= (pd c) false))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (not (fd c)))  (= (pd c) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (tgt dc1) c) (pd dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (tgt dc2) c) (fd dc2)))) (not (exists ((dc3 DependerLinkConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) c) (fd dc3)))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) c) (pd dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c) (fd dc2)))) (not (exists ((dc3 DecompositionConcretization)) (and (= (tgt dc3) c) (fd dc3)))))
	)
	true
	false
)))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c)))  (= (co c) false))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)))  (= (co c) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (tgt dc1) c) (co dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (tgt dc2) c) (or (fd dc2) (pd dc2))))) (not (exists ((dc3 DependerLinkConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) c) (or (fd dc3) (pd dc3))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) c) (co dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c) (or (fd dc2) (pd dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (tgt dc3) c) (or (fd dc3) (pd dc3))))))
	)
	true
	false
)))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c)))  (= (un c) false))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)))  (= (un c) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (tgt dc1) c) (un dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (tgt dc2) c) (or (fd dc2) (pd dc2) (co dc2))))) (not (exists ((dc3 DependerLinkConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) c) (or (fd dc3) (pd dc3) (co dc3))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) c) (un dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (tgt dc3) c) (or (fd dc3) (pd dc3) (co dc3))))))
	)
	true
	false
)))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c) (un c)))  (= (n c) false))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)) (not (un c)))  (= (n c) (ite
	(or
		(and (not (exists ((dc1 DecompositionConcretization)) (= (tgt dc1) c))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c)))))
		(and (exists ((dc1 DecompositionConcretization)) (and (= (tgt dc1) c) (n dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (tgt dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))) (not (exists ((dc3 DependerLinkConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) c) (or (fd dc3) (pd dc3) (co dc3) (un dc3))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) c) (n dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (tgt dc3) c) (or (fd dc3) (pd dc3) (co dc3) (un dc3))))))
	)
	true
	false
)))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c) (un c) (n c)))  (= (ps c) false))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)) (not (un c)) (not (n c)))  (= (ps c) (ite
	(or
		(and (exists ((dc1 DecompositionConcretization)) (and (= (tgt dc1) c) (ps dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (tgt dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2))))) (not (exists ((dc3 DependerLinkConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) c) (or (fd dc3) (pd dc3) (co dc3) (un dc3) (n dc3))))))
		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) c) (ps dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (tgt dc3) c) (or (fd dc3) (pd dc3) (co dc3) (un dc3) (n dc3))))))
	)
	true
	false
)))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c) (un c) (n c) (ps c)))  (= (fs c) false))))
(assert (forall ((c TaskConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)) (not (un c)) (not (n c)) (not (ps c)))  (= (fs c) true))))
;(assert (forall ((c TaskConcretization)) (=> (not (inited c))  (= (fs c) (ite
;	(or
;		(and (exists ((dc1 DecompositionConcretization)) (and (= (tgt dc1) c) (fs dc1))) (not (exists ((dc2 DecompositionConcretization)) (and (= (tgt dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2) (ps dc2))))) (not (exists ((dc3 DependerLinkConcretization)) (and (= (srcEndpoint dc3) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc3) c) (or (fd dc3) (pd dc3) (co dc3) (un dc3) (n dc3) (ps dc3))))))
;		(and (exists ((dc1 DependerLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc1) c) (fs dc1))) (not (exists ((dc2 DependerLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_TASK) (= ((as src (TaskConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2) (ps dc2))))) (not (exists ((dc3 DecompositionConcretization)) (and (= (tgt dc3) c) (or (fd dc3) (pd dc3) (co dc3) (un dc3) (n dc3) (ps dc3))))))
;	)
;	true
;	false
;)))))

;SoftGoal propagation (only Contribution)
(assert (forall ((c SoftGoalConcretization)) (=> (not (inited c)) (= (co c) (ite
	(or (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (co cc1))) (exists ((cc2 ContributionConcretization) (cc3 ContributionConcretization)) (and (= (tgt cc2) c) (and (= (tgt cc3) c) (and (or (fs cc2) (ps cc2)) (or (pd cc3) (fd cc3)))))))
	true
	false
)))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (co c)) (= (un c) false))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (not (co c))) (= (un c) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (un cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) c) (co cc2)))) (not (exists ((cc3 ContributionConcretization) (cc4 ContributionConcretization)) (and (= (tgt cc3) c) (and (= (tgt cc4) c) (and (or (fs cc3) (ps cc3)) (or (pd cc4) (fd cc4))))))))
	true
	false
)))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (or (co c) (un c))) (= (fs c) false))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (not (co c)) (not (un c))) (= (fs c) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (fs cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) c) (or (un cc2) (co cc2) (pd cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (or (co c) (un c) (fs c))) (= (ps c) false))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (not (co c)) (not (un c)) (not (fs c))) (= (ps c) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (ps cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) c) (or (fs cc2) (un cc2) (co cc2) (pd cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (or (co c) (un c) (fs c) (ps c))) (= (fd c) false))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (not (co c)) (not (un c)) (not (fs c)) (not (ps c))) (= (fd c) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (fd cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) c) (or (fs cc2) (ps cc2) (un cc2) (co cc2))))))
	true
	false
)))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (or (co c) (un c) (fs c) (ps c) (fd c))) (= (pd c) false))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (not (co c)) (not (un c)) (not (fs c)) (not (ps c)) (not (fd c))) (= (pd c) (ite
	(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (pd cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) c) (or (fs cc2) (ps cc2) (un cc2) (co cc2) (fd cc2))))))
	true
	false
)))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (or (co c) (un c) (fs c) (ps c) (fd c) (pd c))) (= (n c) false))))
(assert (forall ((c SoftGoalConcretization)) (=> (and (not (inited c)) (not (co c)) (not (un c)) (not (fs c)) (not (ps c)) (not (fd c)) (not (pd c))) (= (n c) true))))
;(assert (forall ((c SoftGoalConcretization)) (=> (not (inited c)) (= (n c) (ite
;	(or
;		(not (exists ((cc ContributionConcretization)) (= (tgt cc) c)))
;		(and (exists ((cc1 ContributionConcretization)) (and (= (tgt cc1) c) (n cc1))) (not (exists ((cc2 ContributionConcretization)) (and (= (tgt cc2) c) (or (fs cc2) (ps cc2) (un cc2) (co cc2) (pd cc2) (fd cc2))))))
;	)
;	true
;	false
;)))))

;Resource propagation (only Dependee)
(assert (forall ((c ResourceConcretization)) (=> (not (inited c)) (= (fd c) (ite
	(exists ((dc DependeeLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc) c) (fd dc)))
	true
	false
)))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (fd c))  (= (pd c) false))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (not (fd c)))  (= (pd c) (ite
	(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) c) (pd dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) c) (fd dc2)))))
	true
	false
)))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c)))  (= (co c) false))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)))  (= (co c) (ite
	(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) c) (co dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) c) (or (fd dc2) (pd dc2))))))
	true
	false
)))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c)))  (= (un c) false))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)))  (= (un c) (ite
	(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) c) (un dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2))))))
	true
	false
)))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c) (un c)))  (= (n c) false))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)) (not (un c)))  (= (n c) (ite
	(or
		(not (exists ((dc DependeeLinkConcretization)) (and (= (srcEndpoint dc) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc) c))))
		(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) c) (n dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2))))))
	)
	true
	false
)))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c) (un c) (n c)))  (= (ps c) false))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)) (not (un c)) (not (n c)))  (= (ps c) (ite
	(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) c) (ps dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2))))))
	true
	false
)))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (or (fd c) (pd c) (co c) (un c) (n c) (ps c)))  (= (fs c) false))))
(assert (forall ((c ResourceConcretization)) (=> (and (not (inited c)) (not (fd c)) (not (pd c)) (not (co c)) (not (un c)) (not (n c)) (not (ps c)))  (= (fs c) true))))
;(assert (forall ((c ResourceConcretization)) (=> (not (inited c))  (= (fs c) (ite
;	(and (exists ((dc1 DependeeLinkConcretization)) (and (= (srcEndpoint dc1) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc1) c) (fs dc1))) (not (exists ((dc2 DependeeLinkConcretization)) (and (= (srcEndpoint dc2) ENDPOINT_RESOURCE) (= ((as src (ResourceConcretization)) dc2) c) (or (fd dc2) (pd dc2) (co dc2) (un dc2) (n dc2) (ps dc2))))))
;	true
;	false
;)))))
[/template]

[template public encodeIStarMAVO(istar : IStar, modelName : String)]
[comment @main/]
[file (modelName + '.smt2', false, 'UTF-8')]
[encodeConstants(istar)/]
[encodeModel(istar)/]
[encodeAnalysis(istar)/]
[encodeConstraints(istar)/]
[encodePropagation(istar)/]
[/file]
[/template]
