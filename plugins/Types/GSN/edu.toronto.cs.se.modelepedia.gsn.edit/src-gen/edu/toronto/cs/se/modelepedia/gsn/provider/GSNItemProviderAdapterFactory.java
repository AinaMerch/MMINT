/**
 * Copyright (c) 2012-2021 Alessio Di Sandro, Marsha Chechik, Nick Fung.
 * All rights reserved. This program and the accompanying materials are made available under the terms
 * of the Eclipse Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alessio Di Sandro - Implementation
 *   Nick Fung - Implementation.
 *
 */
package edu.toronto.cs.se.modelepedia.gsn.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import edu.toronto.cs.se.modelepedia.gsn.util.GSNAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GSNItemProviderAdapterFactory extends GSNAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GSNItemProviderAdapterFactory() {
    this.supportedTypes.add(IEditingDomainItemProvider.class);
    this.supportedTypes.add(IStructuredItemContentProvider.class);
    this.supportedTypes.add(ITreeItemContentProvider.class);
    this.supportedTypes.add(IItemLabelProvider.class);
    this.supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.SafetyCase} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SafetyCaseItemProvider safetyCaseItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.SafetyCase}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSafetyCaseAdapter() {
    if (this.safetyCaseItemProvider == null) {
      this.safetyCaseItemProvider = new SafetyCaseItemProvider(this);
    }

    return this.safetyCaseItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.SupportedBy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SupportedByItemProvider supportedByItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.SupportedBy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSupportedByAdapter() {
    if (this.supportedByItemProvider == null) {
      this.supportedByItemProvider = new SupportedByItemProvider(this);
    }

    return this.supportedByItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.InContextOf} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InContextOfItemProvider inContextOfItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.InContextOf}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInContextOfAdapter() {
    if (this.inContextOfItemProvider == null) {
      this.inContextOfItemProvider = new InContextOfItemProvider(this);
    }

    return this.inContextOfItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.BasicGoal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BasicGoalItemProvider basicGoalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.BasicGoal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBasicGoalAdapter() {
    if (this.basicGoalItemProvider == null) {
      this.basicGoalItemProvider = new BasicGoalItemProvider(this);
    }

    return this.basicGoalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.IndependenceGoal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndependenceGoalItemProvider independenceGoalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.IndependenceGoal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIndependenceGoalAdapter() {
    if (this.independenceGoalItemProvider == null) {
      this.independenceGoalItemProvider = new IndependenceGoalItemProvider(this);
    }

    return this.independenceGoalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.DomainGoal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainGoalItemProvider domainGoalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.DomainGoal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainGoalAdapter() {
    if (this.domainGoalItemProvider == null) {
      this.domainGoalItemProvider = new DomainGoalItemProvider(this);
    }

    return this.domainGoalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.PropertyDecompositionStrategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyDecompositionStrategyItemProvider propertyDecompositionStrategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.PropertyDecompositionStrategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyDecompositionStrategyAdapter() {
    if (this.propertyDecompositionStrategyItemProvider == null) {
      this.propertyDecompositionStrategyItemProvider = new PropertyDecompositionStrategyItemProvider(this);
    }

    return this.propertyDecompositionStrategyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.PropertyGoal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyGoalItemProvider propertyGoalItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.PropertyGoal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPropertyGoalAdapter() {
    if (this.propertyGoalItemProvider == null) {
      this.propertyGoalItemProvider = new PropertyGoalItemProvider(this);
    }

    return this.propertyGoalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.BasicStrategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BasicStrategyItemProvider basicStrategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.BasicStrategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBasicStrategyAdapter() {
    if (this.basicStrategyItemProvider == null) {
      this.basicStrategyItemProvider = new BasicStrategyItemProvider(this);
    }

    return this.basicStrategyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ASILDecompositionStrategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ASILDecompositionStrategyItemProvider asilDecompositionStrategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ASILDecompositionStrategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createASILDecompositionStrategyAdapter() {
    if (this.asilDecompositionStrategyItemProvider == null) {
      this.asilDecompositionStrategyItemProvider = new ASILDecompositionStrategyItemProvider(this);
    }

    return this.asilDecompositionStrategyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Solution} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SolutionItemProvider solutionItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Solution}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSolutionAdapter() {
    if (this.solutionItemProvider == null) {
      this.solutionItemProvider = new SolutionItemProvider(this);
    }

    return this.solutionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Context} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextItemProvider contextItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Context}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextAdapter() {
    if (this.contextItemProvider == null) {
      this.contextItemProvider = new ContextItemProvider(this);
    }

    return this.contextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Justification} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JustificationItemProvider justificationItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Justification}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJustificationAdapter() {
    if (this.justificationItemProvider == null) {
      this.justificationItemProvider = new JustificationItemProvider(this);
    }

    return this.justificationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.Assumption} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssumptionItemProvider assumptionItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.Assumption}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAssumptionAdapter() {
    if (this.assumptionItemProvider == null) {
      this.assumptionItemProvider = new AssumptionItemProvider(this);
    }

    return this.assumptionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ASIL} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ASILItemProvider asilItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ASIL}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createASILAdapter() {
    if (this.asilItemProvider == null) {
      this.asilItemProvider = new ASILItemProvider(this);
    }

    return this.asilItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ImpactAnnotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImpactAnnotationItemProvider impactAnnotationItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ImpactAnnotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImpactAnnotationAdapter() {
    if (this.impactAnnotationItemProvider == null) {
      this.impactAnnotationItemProvider = new ImpactAnnotationItemProvider(this);
    }

    return this.impactAnnotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.AndSupporter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AndSupporterItemProvider andSupporterItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.AndSupporter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAndSupporterAdapter() {
    if (this.andSupporterItemProvider == null) {
      this.andSupporterItemProvider = new AndSupporterItemProvider(this);
    }

    return this.andSupporterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.OrSupporter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OrSupporterItemProvider orSupporterItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.OrSupporter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOrSupporterAdapter() {
    if (this.orSupporterItemProvider == null) {
      this.orSupporterItemProvider = new OrSupporterItemProvider(this);
    }

    return this.orSupporterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.XorSupporter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XorSupporterItemProvider xorSupporterItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.XorSupporter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createXorSupporterAdapter() {
    if (this.xorSupporterItemProvider == null) {
      this.xorSupporterItemProvider = new XorSupporterItemProvider(this);
    }

    return this.xorSupporterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.MofNSupporter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MofNSupporterItemProvider mofNSupporterItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.MofNSupporter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMofNSupporterAdapter() {
    if (this.mofNSupporterItemProvider == null) {
      this.mofNSupporterItemProvider = new MofNSupporterItemProvider(this);
    }

    return this.mofNSupporterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.IntDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntDomainItemProvider intDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.IntDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIntDomainAdapter() {
    if (this.intDomainItemProvider == null) {
      this.intDomainItemProvider = new IntDomainItemProvider(this);
    }

    return this.intDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.RealDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RealDomainItemProvider realDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.RealDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRealDomainAdapter() {
    if (this.realDomainItemProvider == null) {
      this.realDomainItemProvider = new RealDomainItemProvider(this);
    }

    return this.realDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.EnumDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnumDomainItemProvider enumDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.EnumDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnumDomainAdapter() {
    if (this.enumDomainItemProvider == null) {
      this.enumDomainItemProvider = new EnumDomainItemProvider(this);
    }

    return this.enumDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.ValueDomain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueDomainItemProvider valueDomainItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.ValueDomain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createValueDomainAdapter() {
    if (this.valueDomainItemProvider == null) {
      this.valueDomainItemProvider = new ValueDomainItemProvider(this);
    }

    return this.valueDomainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.toronto.cs.se.modelepedia.gsn.DomainDecompositionStrategy} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainDecompositionStrategyItemProvider domainDecompositionStrategyItemProvider;

  /**
   * This creates an adapter for a {@link edu.toronto.cs.se.modelepedia.gsn.DomainDecompositionStrategy}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainDecompositionStrategyAdapter() {
    if (this.domainDecompositionStrategyItemProvider == null) {
      this.domainDecompositionStrategyItemProvider = new DomainDecompositionStrategyItemProvider(this);
    }

    return this.domainDecompositionStrategyItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return this.supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      var adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    this.changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification) {
    this.changeNotifier.fireNotifyChanged(notification);

    if (this.parentAdapterFactory != null) {
      this.parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose() {
    if (this.safetyCaseItemProvider != null) this.safetyCaseItemProvider.dispose();
    if (this.supportedByItemProvider != null) this.supportedByItemProvider.dispose();
    if (this.inContextOfItemProvider != null) this.inContextOfItemProvider.dispose();
    if (this.basicGoalItemProvider != null) this.basicGoalItemProvider.dispose();
    if (this.independenceGoalItemProvider != null) this.independenceGoalItemProvider.dispose();
    if (this.basicStrategyItemProvider != null) this.basicStrategyItemProvider.dispose();
    if (this.asilDecompositionStrategyItemProvider != null) this.asilDecompositionStrategyItemProvider.dispose();
    if (this.solutionItemProvider != null) this.solutionItemProvider.dispose();
    if (this.contextItemProvider != null) this.contextItemProvider.dispose();
    if (this.justificationItemProvider != null) this.justificationItemProvider.dispose();
    if (this.assumptionItemProvider != null) this.assumptionItemProvider.dispose();
    if (this.asilItemProvider != null) this.asilItemProvider.dispose();
    if (this.impactAnnotationItemProvider != null) this.impactAnnotationItemProvider.dispose();
    if (this.andSupporterItemProvider != null) this.andSupporterItemProvider.dispose();
    if (this.orSupporterItemProvider != null) this.orSupporterItemProvider.dispose();
    if (this.xorSupporterItemProvider != null) this.xorSupporterItemProvider.dispose();
    if (this.mofNSupporterItemProvider != null) this.mofNSupporterItemProvider.dispose();
    if (this.intDomainItemProvider != null) this.intDomainItemProvider.dispose();
    if (this.realDomainItemProvider != null) this.realDomainItemProvider.dispose();
    if (this.enumDomainItemProvider != null) this.enumDomainItemProvider.dispose();
    if (this.valueDomainItemProvider != null) this.valueDomainItemProvider.dispose();
    if (this.domainDecompositionStrategyItemProvider != null) this.domainDecompositionStrategyItemProvider.dispose();
    if (this.domainGoalItemProvider != null) this.domainGoalItemProvider.dispose();
    if (this.propertyDecompositionStrategyItemProvider != null) this.propertyDecompositionStrategyItemProvider.dispose();
    if (this.propertyGoalItemProvider != null) this.propertyGoalItemProvider.dispose();
  }

}
