[comment encoding = UTF-8 /]
[module LTSToLeanAcceleo('model://edu.toronto.cs.se.mmint.types.lts')/]

[template private sanitize(name : String)]
[name.replace(' ', '_')/]
[/template]

[template private encodeMain(modelName : String)]
import LTS [modelName/]
open lean.parser interactive tactic S A

@['['/]user_command[']'/]
meta def main_lts
(meta_info : decl_meta_info)
(_ : parse (tk "main_lts")) : lean.parser unit :=

do 
   F ← read "property.lean" types.texpr,
   of_tactic 
   (do
      STRAT ← tactic.to_expr F,
      s ← tactic.eval_expr (strategy (path [modelName/])) STRAT,
      let goal := `(deductive %%(reflect (path [modelName/])) %%STRAT), 
      let tac  := solve_patterns (s.Props.length) in do
        res ← try_tactic_on_goal tac goal, 
        if res then do trace "true" 
        else trace "false"
      )
. main_lts
[/template]

[template private encodeModel(lts : LTS, modelName : String)]
import LTS

inductive S
  [for (state : State | lts.states)]
| [sanitize(state.label)/]
  [/for]
open S

inductive A
  [for (transition : Transition | lts.transitions)]
| [sanitize(transition.label)/]
  [/for]
open A

def TR : set (S × A × S) :=
{
  [for (transition : Transition | lts.transitions)]
  ([sanitize(transition.from.label)/], [sanitize(transition.label)/], [sanitize(transition.to.label)/])[if (i < lts.transitions->size())],[/if]
  [/for]
}

def [modelName/] : LTS := LTS.mk S A TR

instance coe1 : has_coe S (token [modelName/]) := 
{coe := fun s, by {rw [modelName/], rw token, exact sum.inl s}}

instance coe2 : has_coe A (token [modelName/]) := 
{coe := fun s, by {rw [modelName/], rw token, exact sum.inr s}}
[/template]

[template public LTSToLean(lts : LTS, modelName : String)]
  [comment @main /]
  [file ('main.lean', false, 'UTF-8')]
[encodeMain(sanitize(modelName))/]
  [/file]
  [file (modelName + '.lean', false, 'UTF-8')]
[encodeModel(lts, sanitize(modelName))/]
  [/file]
[/template]
