[comment encoding = UTF-8 /]
[module LTSToLeanAcceleo('edu.toronto.cs.se.mmint.types.lts')/]

[template private encode(lts : LTS, modelName : String)]
import LTS

inductive S
  [for (state : State | lts.states)]
| [state.label/]
  [/for]
open S

inductive A
  [for (transition : Transition | lts.transitions)]
| [transition.label/]
  [/for]
open A

def TR : set (S × A × S) :=
{
  [for (transition : Transition | lts.transitions) separator (',')]
  ([transition.from.label/], [transition.label/], [transition.to.label/])
  [/for]
}

def [modelName/] : LTS := LTS.mk S A TR

instance coe1 : has_coe S (token [modelName/]) := 
{coe := fun s, by {rw [modelName/], rw token, exact sum.inl s}}

instance coe2 : has_coe A (token [modelName/]) := 
{coe := fun s, by {rw [modelName/], rw token, exact sum.inr s}}
[/template]

[template public LTSToLean(lts : LTS, modelName : String)]
  [comment @main /]
  [file (modelName + '.lean', false, 'UTF-8')]
[encode(lts, modelName)/]
  [/file]
[/template]
