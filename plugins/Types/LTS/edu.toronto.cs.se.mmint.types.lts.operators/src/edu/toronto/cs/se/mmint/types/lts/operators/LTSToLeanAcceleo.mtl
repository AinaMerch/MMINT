[comment encoding = UTF-8 /]
[module LTSToLeanAcceleo('model://edu.toronto.cs.se.mmint.types.lts')/]

[template private sanitize(name : String)]
[name.replace(' ', '_')/]
[/template]

[template private encodeMain(modelName : String)]
import justification common_meta property_catalogue.LTL
import [modelName/]
open interactive S A

meta def main_program_[modelName/] (input : pexpr) : tactic unit :=
do
  STRAT ← tactic.to_expr input,
  match STRAT with
  | `(property.auxiliary.mk %%CLAIM %%PROPS) := do
    aux ← tactic.eval_expr (property.auxiliary (path [modelName/])) STRAT,
    let g : expr := `(deductive (path [modelName/]) (property.to_strategy (%%STRAT))),
    let tac := initialize (aux.Props.length) STRAT,
    try_tactic_on_goal tac g,
    switch,
    res ← is_solved,
    match res with
    | tt := tactic.trace "true"
    | ff := tactic.trace "false"
    end
| _ := tactic.trace "N/A"
end

@['['/]user_command[']'/]
meta def [modelName/]_main
(meta_info : decl_meta_info)
(_ : parse (lean.parser.tk "[modelName/]_main")) : lean.parser unit :=
do
   F ← read "property.lean" types.texpr,
   lean.parser.of_tactic $ main_program_[modelName/] F
.
[modelName/]_main
[/template]

[template private encodeModel(lts : LTS, modelName : String)]
import LTS

inductive S
  [for (state : State | lts.states)]
| [sanitize(state.label)/]
  [/for]
open S

inductive A
  [for (transition : Transition | lts.transitions)]
| [sanitize(transition.label)/]
  [/for]
open A

def TR : set (S × A × S) :=
{
  [for (transition : Transition | lts.transitions)]
  ([sanitize(transition.from.label)/], [sanitize(transition.label)/], [sanitize(transition.to.label)/])[if (i < lts.transitions->size())],[/if]
  [/for]
}

def [modelName/] : LTS := LTS.mk S A TR

instance coe1 : has_coe S (token [modelName/]) := 
{coe := fun s, by {rw [modelName/], rw token, exact sum.inl s}}

instance coe2 : has_coe A (token [modelName/]) := 
{coe := fun s, by {rw [modelName/], rw token, exact sum.inr s}}
[/template]

[template public LTSToLean(lts : LTS, modelName : String)]
  [comment @main /]
  [file ('main.lean', false, 'UTF-8')]
[encodeMain(sanitize(modelName))/]
  [/file]
  [file (modelName + '.lean', false, 'UTF-8')]
[encodeModel(lts, sanitize(modelName))/]
  [/file]
[/template]
