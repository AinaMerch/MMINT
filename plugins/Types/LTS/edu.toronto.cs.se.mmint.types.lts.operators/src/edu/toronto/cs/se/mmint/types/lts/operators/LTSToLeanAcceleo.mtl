[comment encoding = UTF-8 /]
[module LTSToLeanAcceleo('model://edu.toronto.cs.se.mmint.types.lts')/]

[template private sanitize(name : String)]
[name.replaceAll('\\s', '_')/]
[/template]

[template private encodeMain(modelName : String)]
import justification common_meta property_catalogue.LTL
import [modelName/]
open interactive S A

set_option pp.structure_instances_qualifier true

def local_input_name : string := "[modelName/]_input_1"
def local_strat_name : string := "[modelName/]_strat_1"
def local_prf_name : string := "[modelName/]_prf_1"

/- Some hacky stuff for formatting evidence.lean -/

def preamble : string := "import justification [modelName/] common_meta property_catalogue.LTL \n open S A"

meta def proof_template (g : format) (p : string × string) : string :=
"\n\n
theorem " ++ local_prf_name ++ " : " ++ (g.to_string) ++  " :=\nbegin\n" ++ p.1 ++ "\nend" ++ "\n\n\n--" ++ p.2

meta def evidence_file_template (e : format) (prf : string) : string :=
preamble
++ "\n\n @['['/]reducible[']'/] def "
++ local_input_name
++ " : property.input (path [modelName/]) := "
++ e.to_string
++ "\n\n @['['/]reducible[']'/] def "
++ local_strat_name
++ " : Strategy (path [modelName/]) := property.strategy "
++ local_input_name
++ prf

meta def output (s : string) : io unit := do
  of ← io.mk_file_handle "evidence.lean" io.mode.write,
  io.fs.write of s.to_char_buffer

meta def driver (input : pexpr) : tactic unit :=
do
  STRAT ← tactic.to_expr input,
  match STRAT with
  | `(property.input.mk %%CLAIM %%PROPS) :=
  do
  aux ← tactic.eval_expr (property.input (path [modelName/])) STRAT,
  let g := `(deductive (path [modelName/]) (property.strategy %%STRAT)),
  set_goal g,
  let goal_str :=
  "deductive (path [modelName/]) " ++ local_strat_name,
  p ← solve_patterns' (aux.Props.length),
  STRAT ← (tactic_format_expr STRAT),
  tactic.unsafe_run_io $ output $ evidence_file_template STRAT $ proof_template goal_str p,
  res ← is_solved,
  match res with
  | tt := tactic.trace "True"
  | _ := tactic.trace "False"
  end
| _ := return ()
end

@['['/]user_command[']'/]
meta def main
(meta_info : decl_meta_info)
(_ : parse (lean.parser.tk "main")) : lean.parser unit :=
do
   F ← read "property.lean" types.texpr,
   lean.parser.of_tactic $ driver F
.
main
[/template]

[template private encodeModel(lts : LTS, modelName : String)]
import LTS

inductive S
  [for (state : State | lts.states)]
| [sanitize(state.label)/]
  [/for]
open S

inductive A
  [for (transition : Transition | lts.transitions)]
| [sanitize(transition.label)/]
  [/for]
open A

def TR : set (S × A × S) :=
{
  [for (transition : Transition | lts.transitions)]
  ([sanitize(transition.from.label)/], [sanitize(transition.label)/], [sanitize(transition.to.label)/])[if (i < lts.transitions->size())],[/if]
  [/for]
}

def [modelName/] : LTS := LTS.mk S A TR

@['['/]instance[']'/] def S_to_[modelName/]S : has_coe S ([modelName/].S) :=⟨id⟩

@['['/]instance[']'/] def S_to_form : has_coe [modelName/].S (formula [modelName/]) :=
⟨λ s, formula.state s⟩

@['['/]instance[']'/] def S_to_form' : has_coe S (formula [modelName/]) :=
⟨λ s, formula.state s⟩

@['['/]instance[']'/] def Act_to_form : has_coe A (formula [modelName/]) :=
⟨λ a, formula.act a⟩
[/template]

[template public LTSToLean(lts : LTS, modelName : String)]
  [comment @main /]
  [file ('main.lean', false, 'UTF-8')]
[encodeMain(sanitize(modelName))/]
  [/file]
  [file (modelName + '.lean', false, 'UTF-8')]
[encodeModel(lts, sanitize(modelName))/]
  [/file]
[/template]
