package iso26262

import "http://se.cs.toronto.edu/mmint/MID"
import "http://se.cs.toronto.edu/mmint/MID/Relationship"
import "edu.toronto.cs.se.mmint.jase20.iso26262.gsn"
import "edu.toronto.cs.se.mmint.jase20.iso26262.hara"
import "edu.toronto.cs.se.mmint.jase20.iso26262.sysml"

pattern b(event: HazardousEvent) {
  HazardousEvent.situation(event, eventSituation);
  HazardousEvent.hazard(event, hazard);
}

pattern queryC_QM(event: HazardousEvent) {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.controllability(event, "C1");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E1");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E2");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E3");
  HazardousEvent.controllability(event, "C2");
} or {
  HazardousEvent.severity(event, "S2");
  HazardousEvent.exposure(event, "E1");
}

pattern queryC_A(event: HazardousEvent) {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C2");
} or {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E3");
  HazardousEvent.controllability(event, "C3");
}

pattern queryC_B(event: HazardousEvent) {
  HazardousEvent.severity(event, "S1");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C3");
}

pattern queryC_C(event: HazardousEvent) {
  HazardousEvent.severity(event, "S2");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C3");
} or {
  HazardousEvent.severity(event, "S3");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C2");
} or {
  HazardousEvent.severity(event, "S3");
  HazardousEvent.exposure(event, "E3");
  HazardousEvent.controllability(event, "C3");
}

pattern queryC_D(event: HazardousEvent) {
  HazardousEvent.severity(event, "S3");
  HazardousEvent.exposure(event, "E4");
  HazardousEvent.controllability(event, "C3");
}

pattern c(event: HazardousEvent) {
  HazardousEvent.ASIL(event, "QM");
  neg find queryC_QM(event);
} or {
  HazardousEvent.ASIL(event, "A");
  neg find queryC_A(event);
} or {
  HazardousEvent.ASIL(event, "B");
  neg find queryC_B(event);
} or {
  HazardousEvent.ASIL(event, "C");
  neg find queryC_C(event);
} or {
  HazardousEvent.ASIL(event, "D");
  neg find queryC_D(event);
}

//pattern d(event: HazardousEvent) {
//  SafetyGoal(goal);
//  ModelElement.EMFInstanceObject(eventElem, event);
//  ModelElement.EMFInstanceObject(goalElem, goal);
//  connections == count find library.connectedModelElems(goalElem, eventElem);
//  check(connections == 0);
//}
//
//pattern e_asil(event: HazardousEvent, asil: java String) {
//  HazardousEvent.ASIL(event, asil);
//}
//
//pattern e(goal: SafetyGoal) {
//  ModelElement.EMFInstanceObject(goalElem, goal);
//  find library.connectedModelElems(goalElem, eventElem);
//  ModelElement.EMFInstanceObject(eventElem, event);
//  eventASIL == max find e_asil(event, #asil);
//  SafetyGoal.ASIL(goal, goalASIL);
//  eventASIL != goalASIL;
//}
