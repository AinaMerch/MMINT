[comment encoding = UTF-8 /]
[module EcoreMAVOToSMTLIBUtils_M2T('http://www.eclipse.org/emf/2002/Ecore', 'http://se.cs.toronto.edu/mmtf/MAVO')]

[query public getTypes(root : EObject, className : String) : Sequence(OclAny) =
	root->eAllContents()->select(eClass().name = className)
/]

[query public getKinds(root : EObject, className : String) : Sequence(OclAny) =
	root->eAllContents()->select(eClass().name = className or eClass().eAllSuperTypes->exists(name = className))
/]

[query public getUnmergeableIds(mavoModel : MAVOModel, mavoModelObj : MAVOElement) : Sequence(String) =
	invoke(
		'edu.toronto.cs.se.mmtf.mavo.library.MAVOUtils',
		'getUnmergeableIds(edu.toronto.cs.se.mmtf.mavo.MAVOModel, edu.toronto.cs.se.mmtf.mavo.MAVOElement)',
		Sequence{mavoModel, mavoModelObj}
	)
/]

[query public createIdsFromNames(mavoModel : MAVOModel) : OclAny =
	invoke(
		'edu.toronto.cs.se.mmtf.mavo.library.MAVOUtils',
		'createIdsFromNames(edu.toronto.cs.se.mmtf.mavo.MAVOModel)',
		Sequence{mavoModel}
	)
/]

[template public encodeModel(mavoModel : MAVOModel)]
;Model
(define-sort Node () Int)
(define-sort Edge () Int)
(declare-fun src (Edge) Node)
(declare-fun tgt (Edge) Node)
	[for (mavoElement : MAVOElement | mavoModel.eAllContents(MAVOElement))]
		[if (mavoElement.eClass().eAnnotations->exists(source = 'gmf.node'))]
(declare-const [mavoElement.formulaId/] Node)
(assert (= [mavoElement.formulaId/] [i/]))
		[elseif (mavoElement.eClass().eAnnotations->exists(source = 'gmf.link'))]
			[let srcFeature : String = mavoElement.eClass()->union(mavoElement.eClass().eAllSuperTypes)->collect(eAnnotations)->any(source = 'gmf.link' and details->exists(key = 'source')).details->any(key = 'source').value]
			[let tgtFeature : String = mavoElement.eClass()->union(mavoElement.eClass().eAllSuperTypes)->collect(eAnnotations)->any(source = 'gmf.link' and details->exists(key = 'target')).details->any(key = 'target').value]
(declare-const [mavoElement.formulaId/] Edge)
(assert (= [mavoElement.formulaId/] [i/]))
(assert (= (src [mavoElement.formulaId/]) [mavoElement.eGet(srcFeature).oclAsType(MAVOElement).formulaId/]))
(assert (= (tgt [mavoElement.formulaId/]) [mavoElement.eGet(tgtFeature).oclAsType(MAVOElement).formulaId/]))
			[/let]
			[/let]
		[/if]
	[/for]

;Concretizations
	[for (eclass : EClass | mavoModel.eClass().ePackage.eAllContents(EClass)->select(not abstract))]
		[if (eclass.eAnnotations->exists(source = 'gmf.node'))]
(declare-sort [eclass.name/])
(declare-fun node (Node [eclass.name/]) Bool)
		[elseif (eclass.eAnnotations->exists(source = 'gmf.link'))]
(declare-sort [eclass.name/])
(declare-fun edge (Edge [eclass.name/]) Bool)
		[/if]
	[/for]
[/template]
