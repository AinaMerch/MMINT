[comment encoding = UTF-8 /]
[**
 * 
 */]
[module RandomModelToSMTLIB_M2T('http://se.cs.toronto.edu/mmtf/MAVO', 'http://se.cs.toronto.edu/modelepedia/RandomModel')]

[template private encodePreamble(randommodel : RandomModel)]
;Parameters
(declare-const numberOfNodes Int)
(assert (= numberOfNodes [randommodel.nodes->size()/]))
(declare-const numberOfEdges Int)
(assert (= numberOfEdges [randommodel.edges->size()/]))

;Metamodel
(define-sort Node () Int)
(define-sort Edge () Int)
(declare-fun src (Edge) Node)
(declare-fun tgt (Edge) Node)
(declare-fun node (Node) bool)
(declare-fun edge (Edge) bool)
;Well-formedness constraint for simple graphs
(assert (forall 
		((e Edge)) 
		(=>
			(edge e)
			(exists ((n1 Node) (n2 Node))
				(and 
					(node n1) (node n2)
					(= (src e) n1)
					(= (tgt e) n2)
				)
			)
		)
	)
)

;Symmetry-breaking
(assert (forall ((k Node)) (=> (node k) (<= k numberOfNodes))))
(assert (forall ((k Edge)) (=> (edge k) (<= k numberOfEdges))))
(assert (forall ((k Node)) (=> (node k) (> k 0))))
(assert (forall ((k Edge)) (=> (edge k) (> k 0))))

;Encoding of the model and graph structure of the model
;May elements correspond to commented out assertions
[/template]

[template private encodeNamedElement(element : NamedElement)]
	[if (element.may)]
;(assert ([element.type/] [element.name/]))
	[else]
(assert ([element.type/] [element.name/]))
	[/if]
[/template]

[template private encodeNodes(randommodel : RandomModel)]
	[for (node : Node | randommodel.nodes)]
[encodeNamedElement(node)/]
	[/for]
[/template]

[template private encodeEdges(randommodel : RandomModel)]
	[for (edge : Edge | randommodel.edges)]
[encodeNamedElement(edge)/]
(assert (= (src [edge.name/]) [edge.src.name/]))
(assert (= (tgt [edge.name/]) [edge.tgt.name/]))
	[/for]
[/template]

[template private encodePostamble(, concretizationsMarker1 : String, concretizationsMarker2 : String, concretizations : String)]
[concretizationsMarker1/]
[concretizations/]
[concretizationsMarker2/]
;Run
(check-sat)
[/template]

[**
 * 
 * @param randommodel The random model.
 */]
[template public encodeRandomModel(randommodel : RandomModel, concretizationsMarker1 : String, concretizationsMarker2 : String, concretizations : String)]
[comment @main/]
[file (randommodel.name + '.smt2', false, 'UTF-8')]
[encodePreamble(randommodel)/]
[encodeNodes(randommodel)/]
[encodeEdges(randommodel)/]
[encodePostamble(concretizationsMarker1, concretizationsMarker2, concretizations)/]
[/file]
[/template]
