-- @nsURI RandomModel=http://se.cs.toronto.edu/modelepedia/RandomModel
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore

module EcoreToRandomModel;
create OUT : RandomModel from IN : Ecore;

rule EPackageRoot2RandomModel {
	from
		package: Ecore!EPackage (
			package.eSuperPackage.oclIsUndefined()
		)
	to
		random: RandomModel!RandomModel (
			name <- package.name,
			type <- 'TypeGraph',
			nodes <- Ecore!EClass.allInstancesFrom('IN')->reject(class | class.name.toLower() = package.name)->collect(class | thisModule.EClass2Node(class)),
			edges <- Ecore!EReference.allInstancesFrom('IN')->reject(ref | ref.eContainingClass.name.toLower() = package.name)->collect(ref | thisModule.EReference2Edge(ref))
		)
}

unique lazy rule EClass2Node {
	from
		class: Ecore!EClass
	to
		node: RandomModel!Node (
			name <- class.name,
			type <- 'Metaclass'
		)
}

lazy rule EReference2Edge {
	from
		ref: Ecore!EReference
	to
		edge: RandomModel!Edge (
			name <- ref.name,
			type <- 'Metareference',
			src  <- thisModule.EClass2Node(ref.eContainingClass),
			tgt  <- thisModule.EClass2Node(ref.eReferenceType)
		)
}