/*
 * Copyright (C) 2012 Marsha Chechik, Alessio Di Sandro, Rick Salay
 * 
 * This file is part of MMTF ver. 0.9.0.
 * 
 * MMTF is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MMTF is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with MMTF.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.toronto.cs.se.mmtf;

/**
 * Custom exception for MMTF.
 *
 * @author Alessio Di Sandro
 */
public class MMTFException extends Exception {

	/** Exception types. */
	public enum Type {WARNING, ERROR}

	/** Autogenerated. */
	private static final long serialVersionUID = 1L;

	/**
	 * Prints an exception.
	 *
	 * @param type    The exception category.
	 * @param message The exception message.
	 * @param e       The exception or error.
	 */
	public static void print(Type type, String message, Throwable e) {

		switch (type) {
			case WARNING:
				message = "WARNING: " + message;
				break;
			case ERROR:
				message = "ERROR: " + message;
				break;
			default:
				message = "UNKNOWN PROBLEM: " + message;
		}
		System.err.println(message);
		System.err.println(" -> " + e.getMessage());

		if (type == Type.ERROR) {
			e.printStackTrace();
			System.exit(-1);
		}
	}

	/**
	 * Constructor: initialises the superclass.
	 *
	 * @param message The exception message.
	 */
	public MMTFException(String message) {

		super(message);
	}

	/**
	 * Constructor: initialises the superclass with a chained exception.
	 *
	 * @param message The exception message.
	 * @param cause   The exception that caused this exception.
	 */
	public MMTFException(String message, Throwable cause) {

		super(message, cause);
	}

}
